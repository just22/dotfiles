# ----------------------------------------------------------------------
#  $Id$
#
#  Aliases for Bourne-type shells
# ----------------------------------------------------------------------

_helpme() { cat << __HELP__
# ----------------------------------------------------------------------
# List directory contents
#
l               - Colored list
la              - All files list
lam             - All files list | $PAGER
lat             - All files list, sort by time modified
latm            - All files list, sort by time modified | $PAGER
latc            - All files list, sort by file status time change
latcm           - All files list, sort by file status time change | $PAGER
ll              - Long list
llm             - Long list | $PAGER
llt             - Long list, sort by time modified
lltm            - Long list, sort by time modified | $PAGER
lltc            - Long list, sort by file status time change
lltcm           - Long list, sort by file status time change | $PAGER
lla             - All files long list
llam            - All files long list | $PAGER
llat            - All files long list, sort by time modified
llatm           - All files long list, sort by time modified | $PAGER
llatc           - All files long list, sort by file status time change
llatcm          - All files long list, sort by file status time change | $PAGER
llink           - List links
lfile           - List files only
lmod            - List of files modified in the last 24hrs

# ----------------------------------------------------------------------
# (Un)safe file operations
#
cp              - Copy files, request confirmation before overwriting, preserve attributes
del             - Safe(r) remove
mv              - Move files, request confirmation before overwriting
rm              - Remove directory entries, request confirmation
rmf             - Recursively remove directory entries, no confirmation

# ----------------------------------------------------------------------
# History
#
h               - History (most recent 25 entries)
hgrep           - History grep
v               - Edit lst command in $EDITOR

# ----------------------------------------------------------------------
# Calendar
#
now             - Current date/time in proper format

# ----------------------------------------------------------------------
# File/dir statistics
#
age             - File "age"
ft              - Report file type in dir/tree
ldu/usage       - Show first 10 biggest files
nd              - Number of non-hidden directories
nda             - Number of all directories
ndh             - Number of hidden directories
nf              - Number of non-hidden files
nfa             - Number of all files
nfh             - Number of hidden files
nl              - Number of non-hidden links
nla             - Number of all links
nlh             - Number of hidden links

# ----------------------------------------------------------------------
# Calculator
#
b2d             - BIN to DEC converter
b2h             - BIN to HEX converter
b2o             - BIN to OCT converter
d2b             - DEC to BIN converter
d2h             - DEC to HEX converter
d2o             - DEC to OCT converter
h2b             - HEX to BIN converter
h2d             - HEX to DEC converter
h2o             - HEX to OCT converter
o2b             - OCT to BIN converter
o2d             - OCT to DEC converter
o2h             - OCT to HEX converter

# ----------------------------------------------------------------------
# Some vim-style commands
#
:0              - Clear
:b#             - Edit previous file
:e              - Edit file
:q              - Exit

# ----------------------------------------------------------------------
# Commands with progress monitors
#
pcp             - cp with progress monitor

# ----------------------------------------------------------------------
# Various
#
bln             - List broken links (-l for long format)
c               - Clear screen
catn            - cat -n
cutf            - Select nth field of line
d               - Current working dir
ff              - Recursively find files by (part of) name
ff.             - Find files in current directory by (part of) name
flast           - Print the last modified file or directory
fpath           - Print absolute pathname (with dereferenced symbolic links)
{,e,f,x}grepc   - Colorized grep
grepo           - Open all files after pattern match
nowrap          - Do not wrap output of specified command
pid             - Process IDs matching argument
r               - Re-execute most recent command, [-g] [old=new] [prefix]
rs              - rsync with most common options
runl            - Execute line \$1 from file \$2
showpath        - Show \$PATH (or the variable provided as argument) in a readable form
touchall        - Change file access and modification times to all files in current dir
v               - Edit last command
vimall          - Open all files in <dir>

# ----------------------------------------------------------------------
# Moving around
#
cds             - cd with shortened pathnames
g               - Jump to mark \$1
m               - Set mark \$1 at current directory
marks           - List all marks

# ----------------------------------------------------------------------
# cvs
#
cvs-adddir      - Recursively add directories in current path to cvs tree
cvs-ck          - Check for modified files
cvs-mrg         - Update with merge
cvs-up          - Update

# ----------------------------------------------------------------------
# Change XTerm colorscheme on-the-fly
#
dark            - Switch current xterm colors to solarized-dark
dark-desat      - Switch current xterm colors to solarized-dark-desaturated
light           - Switch current xterm colors to solarized-light
light-desat     - Switch current xterm colors to solarized-light-desaturated
__HELP__
}
helpme() { _helpme | grep ${1-.\*} | less -cF; }


# ----------------------------------------------------------------------
# Enable color support for ls
#
if [ "${COLOR_SUPPORT}" = 1 ]; then
        if ls --color > /dev/null 2>&1; then
                alias l='ls --color=always'
        elif colorls > /dev/null 2>&1; then
                LSCOLORS="exfxcxdxbxgxDxBxGxCbCx"; export LSCOLORS
                alias l='colorls -G'
        else
                alias l='ls -F'
        fi
else
        alias l='ls -F'
fi

# ----------------------------------------------------------------------
# File listing
#
alias la='l -A'
lam() { la "$@" | ${PAGER-less}; }
alias lat='la -tr'
latm() { lat "$@" | ${PAGER-less}; }
alias latc='lat -c'
latcm() { latc "$@" | ${PAGER-less}; }

alias ll='l -lh'
llm() { ll "$@" | ${PAGER-less}; }
alias llt='ll -tr'
lltm() { llt "$@" | ${PAGER-less}; }
alias lltc='llt -c'
lltcm() { lltc "$@" | ${PAGER-less}; }

alias lla='la -l'
llam() { lla "$@" | ${PAGER-less}; }
alias llat='lla -tr'
llatm() { llat "$@" | ${PAGER-less}; }
alias llatc='llat -c'
llatcm() { llatc "$@" | ${PAGER-less}; }

llink() { find ${1-.} -maxdepth 1 -type l -ls; }
lfile() { find ${1-.} -maxdepth 1 -type f -print; }
lmod() { find ${1-.} -type d \( -name .cache -o -name .snapshot \) -prune -o -type f -mtime -1 -print; }

# ----------------------------------------------------------------------
# Safe file operations
#
alias rmf='/bin/rm -rf'
alias rm='/bin/rm -i'
alias cp='/bin/cp -ip'
alias mv='/bin/mv -i'

# ----------------------------------------------------------------------
# Safe remove
#
del() {
        case "$#" in
        0)
                echo "Usage: del file ..."
                return
                ;;
        1)
                case "$(/bin/ls -dl "$1")" in
                -*) ft="regular file" ;;
                b*) ft="block special file" ;;
                c*) ft="character special file" ;;
                d*) ft="directory" ;;
                l*) ft="symbolic link" ;;
                p*) ft="FIFO" ;;
                s*) ft="socket link" ;;
                esac
                echo -n "Remove $ft $1? [y/N] "; read r
                case "$r" in
                [yY]*) /bin/rm -rf "$1" ;;
                esac
                ;;
        *)
                echo "You're going to (recursively) remove the following elements:"
                ls -dF "$@"
                echo -n "Please confirm [y/N] "; read r
                case "$r" in
                [yY]*) /bin/rm -rf "$@"
                esac
                ;;
        esac
}

# ----------------------------------------------------------------------
# Dir stack commands
#
pd() { pushd "$@" > /dev/null; dirs -v; }
alias lpd='dirs -v'
alias cpd='dirs -c'
mkpd() { mkdir "$1"; pd "$1"; }

# ----------------------------------------------------------------------
# History
#
alias h='history | tail -25'
alias hgrep='history | grep -E '
alias v='fc -e vim'

# ----------------------------------------------------------------------
# It is safer to always specify the full path name for passwd(1), su(1)
# and sudo(8) commands as this inhibits the possibility of rogue files
# placed in your PATH being executed for most shells
#
alias passwd='/usr/bin/passwd'

if [ -f /usr/bin/su ]; then
        alias su='/usr/bin/su'
elif [ -f /bin/su ]; then
        alias su='/bin/su'
fi

if [ -f /usr/bin/sudo ]; then
        alias sudo='/usr/bin/sudo'
elif [ -f /usr/local/bin/sudo ]; then
        alias sudo='/usr/local/bin/sudo'
fi

# ----------------------------------------------------------------------
# Calendar
#
if cal -3 > /dev/null 2>&1; then
        # GNU version
        alias cal='cal -m3'
else
        # BSD version
        alias cal='cal -mw | sed -E "2,\$s/(^|[^0-9])($(date +%e))( |$)/\1$(tput rev)$(echo "\2")$(tput sgr0)\3/g"'
fi
alias now='date "+%a %d %b %Y %Z (WK %V) - %H:%M"'

# ----------------------------------------------------------------------
# Colorize grep
# Note: --color=always (instead of the default --color=auto) activates
# colors even when the output is not a terminal, as e.g. when there is
# a pipe with a pager; this could break things sometimes...
#
if echo "x" | grep --color "x" > /dev/null 2>&1; then
        alias grepc='grep --color=always'
        alias egrepc='egrep --color=always'
        alias fgrepc='fgrep --color=always'
        alias zgrepc='zgrep --color=always'
elif [ -e /usr/local/bin/ggrep ]; then
        # GNU grep certainly has color=always support
        alias grepc='ggrep --color=always'
        alias egrepc='gegrep --color=always'
        alias fgrepc='gfgrep --color=always'
        alias zgrepc='gzgrep --color=always'
fi

# ----------------------------------------------------------------------
# File/dir statistics
#
ldu() { du -chs ${1-.}/* | sort -rh | head -10; }
alias usage='ldu'
nf()  { ls -l  $1 | grep "^-" | wc -l; }
nfa() { ls -lA $1 | grep "^-" | wc -l; }
nfh() { ls -lA $1 | grep "^-" | awk '{print $9}' | grep "^\." | wc -l; }
nd()  { ls -l  $1 | grep "^d" | wc -l; }
nda() { ls -lA $1 | grep "^d" | wc -l; }
ndh() { ls -lA $1 | grep "^d" | awk '{print $9}' | grep "^\." | wc -l; }
nl()  { ls -l  $1 | grep "^l" | wc -l; }
nla() { ls -lA $1 | grep "^l" | wc -l; }
nlh() { ls -lA $1 | grep "^l" | awk '{print $9}' | grep "^\." | wc -l; }

# Report file type in dir/tree
ft() {
        # Based on the original code by Bruce Barnet, modified by Yunliang Yu
        # This version adds a help message, uses file(1) "brief mode"
        # (simplifying the awk(1) body) and hides error in case no file is
        # found in the specified dir, and makes the recursive search optional
        # through the "-r" switch
        if [ "$1" == "-h" ]; then
                echo "usage: ft [-r] [<pathName> ...]"
                return
        elif [ "$1" == "-r" ]; then
                shift
        else
                local FIND_OPT="-maxdepth 1"
        fi
        find ${*-.} $FIND_OPT -type f -print0 | xargs -0 file -b 2>/dev/null |
        awk '{tcnt[$0]++}
             END{for (type in tcnt) printf("%d\t%s\n", tcnt[type], type)}' |
        sort -nr
}

# File "age"
tfmt() {
        if [ $# -ne 1 ]; then
                echo "usage: tfmt <seconds>"
                return
        fi
        if [ $1 -lt 60 ]; then
                echo "${1}s"
        else
                DAYS=$(expr \( $1 / 86400 \) % 30)
                if [ $1 -lt 2592000 ]; then
                        HOURS=$(expr \( $1 / 3600 \) % 24)
                        MINUTES=$(expr \( $1 / 60 \) % 60)
                        [ $DAYS -ne 0 ] && echo -n "${DAYS}d "
                        ([ $HOURS -ne 0 ] || ([ $DAYS -ne 0 ] && [ $MINUTES -ne 0 ])) && echo -n "${HOURS}h "
                        [ $MINUTES -ne 0 ] && echo "${MINUTES}min" || echo
                else
                        YEARS=$(expr $1 / 31104000)
                        MONTHS=$(expr \( $1 / 2592000 \) % 12)
                        [ $YEARS -ne 0 ] && echo -n "${YEARS}y "
                        ([ $MONTHS -ne 0 ] || ([ $YEARS -ne 0 ] && [ $DAYS -ne 0 ])) && echo -n "${MONTHS}m "
                        [ $DAYS -ne 0 ] && echo "${DAYS}d" || echo
                fi
        fi
}
age() {
        if [ $# -ne 1 ]; then
                echo "usage: age <fileName>"
                return
        fi
        FILE_NAME="$1"
        if ! [ -a "$FILE_NAME" ]; then
                echo "age: cannot open $FILE_NAME: No such file"
                return
        fi
        # BSD and GNU stat versions have different options
        if stat --version > /dev/null 2>&1; then
                STAT_MTIME_OPT="-c %Y"
        else
                STAT_MTIME_OPT="-t %s -f %m"
        fi
        echo "$(tfmt $(expr $(date +%s) - $(stat "$STAT_MTIME_OPT" "$FILE_NAME")))"
}

# ----------------------------------------------------------------------
# Calculator
#
d2h() { echo "obase=16; ibase=10; $1" | bc; }
d2o() { echo "obase=8;  ibase=10; $1" | bc; }
d2b() { echo "obase=2;  ibase=10; $1" | bc; }
o2h() { echo "obase=16; ibase=8;  $1" | bc; }
o2d() { echo "obase=10; ibase=8;  $1" | bc; }
o2b() { echo "obase=2;  ibase=8;  $1" | bc; }
b2h() { echo "obase=16; ibase=2;  $1" | bc; }
b2o() { echo "obase=8;  ibase=2;  $1" | bc; }
b2d() { echo "obase=10; ibase=2;  $1" | bc; }
h2b() { echo "obase=2;  ibase=16; $1" | bc; }
h2o() { echo "obase=8;  ibase=16; $1" | bc; }
h2d() { echo "obase=10; ibase=16; $1" | bc; }

# ----------------------------------------------------------------------
# Reinforce cache policy for mplayer
#
alias mplayer-hm='mplayer -cache 1572864 -cache-min 80'

# ----------------------------------------------------------------------
# Some vi commands I'm accustomed to...
#
alias :e='vim'
alias :b#='r vim'
alias :q='exit'
alias :0='clear'

# ----------------------------------------------------------------------
# Commands with progress monitors
#
alias pcp='rsync -avzhHp --info=progress2,name0'

# ----------------------------------------------------------------------
# Various
#
alias c='clear'
alias d='echo $PWD'
alias r='fc -s'
alias v='fc -e vim'
alias cutf='tr -s "\t" " " | sed "s/^ //" | cut -d" " -f'
alias rs='rsync -avzhHp --info=progress2'
alias pid='ps axwwwww | grep -v grep | grep -E --'
alias catn='cat -n'
alias touchall='ls -tr | xargs touch'
alias info='info --vi-keys'
alias fpath='readlink -f'
showpath() { echo ${1-$PATH} | tr ":" "\n"; }
vimall() { find ${1-.} -maxdepth 1 -type f -print | xargs sh -c '</dev/tty vim "$@"' ignoreme; }
grepo() { grep -l "$@" | xargs sh -c '</dev/tty vim "$@"' ignoreme; }
runl() { $(head -n "+$1" "$2" | tail -n 1); }
flast() { ls -dt "$@" | head -1; }
nowrap() { printf '\033[?7l'; $@; printf '\033[?7h'; }

# ----------------------------------------------------------------------
# Moving around
#
m() { eval _dirmrk_${1-0}="$(pwd)"; }
j() {
        d="$(eval "echo \$_dirmrk_${1-0}")"
        if [ -d "$d" ]; then
                cd "$d"
        else
                >&2 echo "Invalid mark: '${1-0}'"
        fi
        unset d
}
marks() { (set -o posix; set) | sed -ne "s/^_dirmrk_//p"; }
cds() {
        d="$1"
        # Add '*' to every shortened element of the path; trailing '/.'
        # ensures this only matches a directory
        d_path="$(echo "$d" | sed -Ee 's/([^/]+)/\1*/g')/."

        # 'set' will clear the arglist and expand $d_path; in case $d_path is
        # empty, set "dummy" and shift it away
        set dummy $d_path; shift

        # Change directory if got one match, else print an error message
        if [ "$1" == "$d_path" ]; then
                # shell didn't expand $d_path: pattern doesn't match a valid path
                >&2 echo "cds: no match for $d_path"
        elif [ $# == 1 ]; then
                echo "$1"
                cd "$1"
        else
                >&2 echo "cds: too many matches for $d_path:"
                >&2 ls -d "$@"
        fi

        unset d d_path
}

# Find files by (part of) name
ff() { find . -name "*${1}*" -ls; }
ff.() { find . -maxdepth 1 -name "*${1}*" -ls; }

# List broken links
bln() {
        if [ "$1" == "-l" ]; then
                fcmd=ls
                shift
        else
                fcmd=print
        fi
        find ${1-.} -maxdepth 1 -type l -exec test ! -e {} \; -$fcmd
        unset fcmd
}

# ----------------------------------------------------------------------
# Vim notes
#
nn() { vim -c ":Note $*"; }
sp() { vim -c ":Note Scratchpad"; }
wp() { vim -c ":Note Planning for WK $(date --date=next-monday +%y%V)"; }
todo() { vim -c ":Note todo"; }

# ----------------------------------------------------------------------
# git
#
git_remote_repo() {
        if GIT_DIR="$(git rev-parse --git-dir 2>/dev/null)"; then
                [ "$GIT_DIR" == .git ] &&
                        REPO_NAME="$(basename $PWD)" ||
                        REPO_NAME="$(basename "$(dirname "$GIT_DIR")")"
                git "$1"
        else
                echo "Not in a git tree"
        fi
}
gclone() { git clone https://just22@atlantide.t28.net/git/$1; }
alias gpush='git_remote_repo push'
alias gpull='git_remote_repo pull'
alias gfetch='git_remote_repo fetch'
alias gstatus='git status'
alias gdiff='git diff'
alias glog='git log'

# ----------------------------------------------------------------------
# cvs
#
alias cvs-ck='cvs -qn update'
alias cvs-up='cvs update -dP'
alias cvs-mrg='cvs update -kk'
cvs-adddir() {
        find ${1-.} -type d -name CVS -prune -o -type d -exec cvs add "{}" \;
        find ${1-.} -type d -name CVS -prune -o -type f -exec cvs add "{}" \;
        find ${1-.} -type d -name CVS -prune -o -type f -exec cvs commit -m ${2-Initial commit} "{}" \;
}

# ----------------------------------------------------------------------
# Change XTerm colorscheme on-the-fly
#
alias dark='dynamic-colors switch solarized-dark'
alias dark-desat='dynamic-colors switch solarized-dark-desaturated'
alias light='dynamic-colors switch solarized-light'
alias light-desat='dynamic-colors switch solarized-light-desaturated'

