# ----------------------------------------------------------------------
#  $Id$
#
# Bourne shell prompt look
# (colored when the terminal has the capability)
# ----------------------------------------------------------------------

_escseq() {
        esc="\e"
        code="$1"
        echo -e "${esc}[${code}m"
        unset esc code
}

if [ -z ${NO_COLORS+x} ] && [ $(tput colors) -ge 8 ]; then
        COLOR_SUPPORT=1

        # ANSI escape sequences for graphics mode
        # Color codes:
        # 0 -> Black
        # 1 -> Red
        # 2 -> Green
        # 3 -> Yellow
        # 4 -> Blue
        # 5 -> Magenta
        # 6 -> Cyan
        # 7 -> White

        # Text attributes
             RSTCOL="\[$(_escseq  0)\]"
               BOLD="\[$(_escseq  1)\]"
          UNDERLINE="\[$(_escseq  4)\]"
              BLINK="\[$(_escseq  5)\]"
            REVERSE="\[$(_escseq  7)\]"
          CONCEALED="\[$(_escseq  8)\]"

        # Foreground colors
           FG_BLACK="\[$(_escseq 30)\]"
             FG_RED="\[$(_escseq 31)\]"
           FG_GREEN="\[$(_escseq 32)\]"
          FG_YELLOW="\[$(_escseq 33)\]"
            FG_BLUE="\[$(_escseq 34)\]"
         FG_MAGENTA="\[$(_escseq 35)\]"
            FG_CYAN="\[$(_escseq 36)\]"
           FG_WHITE="\[$(_escseq 37)\]"

        # Background colors
           BG_BLACK="\[$(_escseq 40)\]"
             BG_RED="\[$(_escseq 41)\]"
           BG_GREEN="\[$(_escseq 42)\]"
          BG_YELLOW="\[$(_escseq 43)\]"
            BG_BLUE="\[$(_escseq 44)\]"
         BG_MAGENTA="\[$(_escseq 45)\]"
            BG_CYAN="\[$(_escseq 46)\]"
           BG_WHITE="\[$(_escseq 47)\]"

        # Prompt colors
            P_HICOL="$FG_YELLOW"
          P_NORMCOL="$FG_CYAN"
          [ "$UID" == 0 ] && P_USERCOL="$FG_RED" || P_USERCOL="$P_NORMCOL"
else
        COLOR_SUPPORT=0
fi


PS1_HEAD="..."
PS1_TAIL='\`.....'
[ -n "$DISPLAY" ] && [ "${LC_CTYPE%UTF-8}" != "$LC_CTYPE" ] &&
case "$TERM" in
xterm*|screen*)
        PS1_HEAD="┌──"
        PS1_TAIL="└─────"
        ;;
esac

_ps1_exit_status() {
        es="$?"
        [ "$es" -ne 0 ] && echo "\$?=${es}, "
        unset es
}

# This is a general purpose function, we just take advantage of its execution
# each time the prompt must be issued
_ps1_newdir() {
        ppwd=$(cat /tmp/ppwd.$$ 2>/dev/null)
        if [ "$PWD" != "$ppwd" ]; then
                [ -f "$ppwd"/.exit ] && >&2 . "$ppwd"/.exit
                echo "$PWD" > /tmp/ppwd.$$
                if [ -d CVS ]; then
                        echo "cvs, "
                elif [ -d .SYNC ]; then
                        echo "dss, "
                elif git rev-parse --git-dir > /dev/null 2>&1; then
                        echo "git, "
                fi
                [ -f .enter ] && >&2 . .enter
        fi
}

# Command line prompt
PS1="\[\033[?7l\]"                                                      # Do not wrap prompt line
PS1="${PS1}${P_NORMCOL}\n${PS1_HEAD}"                                   # Prompt "head"
PS1="${PS1}[${P_USERCOL}\u${P_NORMCOL}@${P_HICOL}\h${P_NORMCOL}]-"      # user@hostname
PS1="${PS1}[${P_HICOL}\$(_ps1_exit_status)${P_NORMCOL}"                 # Infobox: last command exit status
PS1="${PS1}\${PRJ_REF:+\$PRJ_REF, }"                                    # Infobox: prj ref
PS1="${PS1}${P_HICOL}\$(_ps1_newdir)${P_NORMCOL}"                       # If new cwd: VCS tree? .enter/.exit cmd files?
PS1="${PS1}\j jobs]-"                                                   # Infobox: no. of managed jobs
PS1="${PS1}[\W]"                                                        # $PWD basename
PS1="${PS1}\n${P_NORMCOL}${PS1_TAIL} \$ ${RSTCOL}"                      # Prompt "tail"
PS1="${PS1}\[\033[?7h\]"                                                # Restore line wrapping

# If this is an xterm, then set the title
PS1="${PS1}\[\033]0;[\s] [\w] [Last cmd: \"\$(tail -1 $HISTFILE)\"]\007\]"
