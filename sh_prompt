# ----------------------------------------------------------------------
#  $Id$
#
# Bourne shell prompt look
# (colored when the terminal has the capability)
# ----------------------------------------------------------------------

_ps1_exit_status() {
        es="$?"
        [ "$es" -ne 0 ] && echo "\$?=${es}, "
        unset es
}

# This is a general purpose function, we just take advantage of its execution
# each time the prompt must be issued
_ps1_dircheck() {
        if [ -d CVS ]; then
                echo "cvs, "
        elif [ -d .SYNC ]; then
                echo "dss, "
        elif git rev-parse --git-dir > /dev/null 2>&1; then
                echo "git, "
        fi
        ppwd=$(cat /tmp/ppwd.$$ 2>/dev/null)
        if [ "$PWD" != "$ppwd" ]; then
                [ -f "$ppwd"/.exit ] && >&2 . "$ppwd"/.exit
                echo "$PWD" > /tmp/ppwd.$$
                [ -f .enter ] && >&2 . .enter
        fi
}

# Command line prompt
PS1="\[\033[?7l\]"                                                      # Do not wrap prompt line
PS1="${PS1}${P_NORMCOL}\n"                                              # Prompt "head"
PS1="${PS1}[${P_USERCOL}\u${P_NORMCOL}@${P_HICOL}\h${P_NORMCOL}]-"      # user@hostname
PS1="${PS1}[${P_HICOL}\$(_ps1_exit_status)${P_NORMCOL}"                 # Infobox: last command exit status
PS1="${PS1}\${PRJ_REF:+\$PRJ_REF, }"                                    # Infobox: prj ref
PS1="${PS1}${P_HICOL}\$(_ps1_dircheck)${P_NORMCOL}"                     # Infobox: VCS tree?; .enter/.exit cmd files?
PS1="${PS1}\j jobs]-"                                                   # Infobox: no. of managed jobs
PS1="${PS1}[\w]"                                                        # $PWD basename
PS1="${PS1}\n${P_NORMCOL}[\A]-\\$ ${RSTCOL}"                            # Prompt "tail"
PS1="${PS1}\[\033[?7h\]"                                                # Restore line wrapping
