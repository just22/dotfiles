# ----------------------------------------------------------------------
#  $Id$
#
# Shell's prompt look
# (colored when the terminal has the capability)
# ----------------------------------------------------------------------

_ps1_exit_status() {
        es="$?"
        [ "$es" -ne 0 ] && echo "*${es}* "
        unset es
}

# Show only $1 trailing PWD components
# Equivalent to:
#       echo $PWD | rev | cut -d "/" -f -3 | rev
# but without forks)
_ps1_pwd_trim() {
        dn="${PWD}"
        while [ "${i-0}" -lt ${1-3} ]; do
                let i="$i + 1"
                tpwd="/${dn##*/}${tpwd}"
                dn=${dn%/*}
                if [ -z "$dn" ]; then
                        # Too short path: leading / must be preserved
                        # (adding a bogus one that will be removed afterward)
                        tpwd="/${tpwd}"
                        break
                fi
        done
        # Removing leading / when path is truncated
        echo "${tpwd#/}"
        unset dn i tpwd
}

# This is a general purpose function, we just take advantage of its
# execution each time the prompt is issued
_ps1_cmd() {
        # VCS tree?
        if [ -d CVS ]; then
                echo -n "cvs "
        elif [ -d .SYNC ]; then
                echo -n "dss "
        elif git rev-parse --git-dir > /dev/null 2>&1; then
                echo -n "git "
        fi
        # .enter/.exit cmd files?
        ppwd=$(cat /tmp/${USER}.ppwd.$$ 2>/dev/null)
        if [ "$PWD" != "$ppwd" ]; then
                [ -f "$ppwd"/.exit ] && >&2 . "$ppwd"/.exit
                echo "$PWD" > /tmp/ppwd.$$
                [ -f .enter ] && >&2 . .enter
        fi
        # Set the xterm's (or tmux pane's) title
        case "$TERM" in
        xterm*|screen*)
                set_title "[${0}] [${PWD}] [Last cmd: \"$(tail -1 "$HISTFILE")\"]"
                ;;
        *)
                ;;
        esac
}

# If this isn't a strictly POSIX shell, use an informative multi-line prompt
if [[ -n "$KSH_VERSION" || "$SH_VERSION" == *KSH* || -n "$BASH_VERSION" ]]
then
        PS1="\[\033[?7l\]"                                                      # Do not wrap prompt line
        PS1="${PS1}${P_NORMCOL}\n"                                              # Empty line
        PS1="${PS1}[${P_USERCOL}\u${P_NORMCOL}@${P_HICOL}\h${P_NORMCOL}]-"      # user@hostname
        PS1="${PS1}[\${PRJ_REF:+\$PRJ_REF }"                                    # Infobox: prj ref
        PS1="${PS1}${P_HICOL}\$(_ps1_exit_status)${P_NORMCOL}"                  # Infobox: last command exit status
        PS1="${PS1}\$(_ps1_cmd)"                                                # Infobox: VCS tree?; .enter/.exit cmd files?
        PS1="${PS1}\j]-"                                                        # Infobox: no. of managed jobs
        PS1="${PS1}[\$(_ps1_pwd_trim)]"                                         # Current working directory
        #PS1="${PS1}\n${P_NORMCOL}[\A]-\\$ ${RSTCOL}"                            # New line with current time and "prompt char"
        PS1="${PS1}\n${P_NORMCOL}\\$ ${RSTCOL}"                                 # New line with "prompt char"
        PS1="${PS1}\[\033[?7h\]"                                                # Restore line wrapping
        PS2=">> "                                                               # Secondary prompt string (more input needed)
fi

