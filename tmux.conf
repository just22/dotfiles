# ----------------------------------------------------------------------
#  $Id$
#
#  tmux configuration file
# ----------------------------------------------------------------------

# No login shell
# Note: Well, I'm now convinced that tmux shells *should* be login shells
# (consider what happens if you exit from X after having launched tmux in
# an xterm: the session will remain active...)
#set-option -g default-command "$SHELL"

# Set command prefix
unbind-key C-b
set-option -g prefix 'C-a'
bind-key 'C-a' send-prefix

# Reload configuration file
bind-key 'C-r' source-file ~/.tmux.conf \; display-message "Loading configuration file..."

# Set the client terminal title
set-option -g set-titles on
set-option -g set-titles-string "[tmux #S:#I.#P] #T"

# Base index when a new window/pane is created
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Switch off automatic window renaming
set-window-option -g automatic-rename off

# Split window key bindings
#unbind-key '"'
bind-key   '-' split-window -v
bind-key   '_' split-window -v
#unbind-key '%'
bind-key   '|' split-window -h
bind-key   '\' split-window -h

# Set the maximum number of lines held in window history
set-option -g history-limit 15360

# Use vi key bindings in copy and choice modes
set-window-option -g mode-keys vi
bind-key 'Escape' copy-mode
bind-key -T copy-mode-vi 'Escape' send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
bind-key -T copy-mode-vi 'Enter'  send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
bind-key -T copy-mode-vi 'v'      send-keys -X begin-selection
bind-key -T copy-mode-vi 'r'      send-keys -X rectangle-toggle
bind-key -T copy-mode-vi 'y'      send-keys -X copy-pipe-and-cancel "xclip -i -selection primary"
bind-key 'p' \
        run-shell "tmux set-buffer \"$(xclip -o -selection primary)\"" \; \
        paste-buffer

# Window selection
bind-key -n 'C-Tab' select-window -t :+1
bind-key -n 'C-.'   select-window -t :+1
bind-key -n 'C-,'   select-window -t :-1

# Panes layout
bind-key 'h'   select-layout main-horizontal
bind-key 'v'   select-layout main-vertical
bind-key 'C-h' select-layout even-horizontal
bind-key 'C-v' select-layout even-vertical
bind-key -n 'C-PageUp' resize-pane -Z

# Panes selection and swapping
set-option -g display-panes-time 5000
bind-key -n 'C-PageDown' display-panes \; select-pane -t :.
bind-key 'k' swap-pane -U
bind-key 'j' swap-pane -D
#bind-key -n 'C--' break-pane -d

# Smart pane switching with awareness of vim splits
bind-key -n 'C-Up'    run-shell "(tmux display-message -p '#{pane_current_command}' | grep -iq vim) && tmux send-keys 'C-Up'   || tmux select-pane -U"
bind-key -n 'C-Down'  run-shell "(tmux display-message -p '#{pane_current_command}' | grep -iq vim) && tmux send-keys 'C-Down' || tmux select-pane -D"
bind-key -n 'C-Right' run-shell "(tmux display-message -p '#{pane_current_command}' | grep -iq vim) && tmux send-keys 'C-Right'|| tmux select-pane -R"
bind-key -n 'C-Left'  run-shell "(tmux display-message -p '#{pane_current_command}' | grep -iq vim) && tmux send-keys 'C-Left' || tmux select-pane -L"
bind-key -n 'C-\'     run-shell "(tmux display-message -p '#{pane_current_command}' | grep -iq vim) && tmux send-keys 'C-\\'   || tmux select-pane -l || :"

# Set the default working directory for new panes
#set-option -g default-path ${HOME}

# Status bar
set-option -g status-position bottom
set-option -g status-left-length  80
set-option -g status-right-length 80
set-option -g status-left '[#S:#I.#P] '
set-option -g status-right '#T'

# Mouse suport
set-option -g mouse on

# Left click on statusbar for windows sequence adjustment
bind-key -n 'MouseDrag1Status' swap-window -t=

# Enter copy-mode
bind-key -n 'DoubleClick1Pane' \
    copy-mode \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -i -selection primary"

# Copy selected text in clipboard
bind-key -T copy-mode-vi 'MouseDragEnd1Pane' \
    send-keys -X copy-pipe-no-clear "xclip -i -selection primary"

bind-key -T copy-mode-vi 'DoubleClick1Pane' \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -i -selection primary"

bind-key -T copy-mode-vi 'TripleClick1Pane' \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-no-clear "xclip -i -selection primary"

# Past selected text from clipboard
bind-key -T copy-mode-vi 'MouseDown2Pane' \
    select-pane \; \
    run-shell "tmux set-buffer \"$(xclip -o -selection primary)\"" \; \
    paste-buffer \; \
    send-keys -X cancel

bind-key -n 'MouseDown2Pane' \
    select-pane \; \
    run-shell "tmux set-buffer \"$(xclip -o -selection primary)\"" \; \
    paste-buffer \; \
    send-keys -X cancel

# Usual text selections with mouse in copy-mode
# bind-key -T copy-mode-vi 'MouseDown1Pane' \
#         select-pane \; \
#         send-keys -X clear-selection

# - Correct the 'colors' entry for terminals which support 88/256 colors;
# - allow xterm titles in terminal window (XT);
# - disable acs support for OpenBSD VT.
# Note: to disable scroll lock on terminal's alternate screen buffer: smcup@:rmcup@;
# this gives minimal mouse support for scrolling and works just in a few cases
set-option -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:colors=256:XT,wsvt*:enacs@:smacs@:rmacs@:acsc@'

# Synchronize panes
bind-key 'C-s' set-window-option synchronize-panes \; display-message "Switching synchronize-panes mode..."

# Bind some very common key sequences in ksh
# Note: vi editing mode is assumed here...
bind-key -n 'C-l' if-shell "[ \"#{pane_current_command}\" == ksh ] || \
                            [ \"#{pane_current_command}\" == sh ]" \
' \
        send-keys Escape 0Diclear Enter Escape pA' \
' \
        send-keys C-l'
bind-key -n 'Up' if-shell "[ \"#{pane_current_command}\" == ksh ] || \
                            [ \"#{pane_current_command}\" == sh ]" \
' \
        send-keys Escape k' \
' \
        send-keys Up'
bind-key -n 'Down' if-shell "[ \"#{pane_current_command}\" == ksh ] || \
                            [ \"#{pane_current_command}\" == sh ]" \
' \
        send-keys Escape j' \
' \
        send-keys Down'
bind-key -n 'Left' if-shell "[ \"#{pane_current_command}\" == ksh ] || \
                            [ \"#{pane_current_command}\" == sh ]" \
' \
        send-keys Escape h' \
' \
        send-keys Left'
bind-key -n 'Right' if-shell "[ \"#{pane_current_command}\" == ksh ] || \
                            [ \"#{pane_current_command}\" == sh ]" \
' \
        send-keys Escape l' \
' \
        send-keys Right'

# ----------------------------------------------------------------------
# Colorscheme
#

# Statusbar
set-option -g status-style fg=black,bg=brightwhite,none

# Active window title
set-window-option -g window-status-current-style fg=red,bg=brightwhite,none

# Window with bell/activity title
set-window-option -g window-status-activity-style fg=cyan,bg=default,none
set-window-option -g window-status-bell-style fg=cyan,bg=default,none

# Other windows title
set-window-option -g window-status-style fg=default,bg=default,none

# Pane border
set-option -g pane-border-style default
set-option -g pane-active-border-style fg=brightred

# Message text
set-option -g message-style fg=black,bg=brightwhite,none

# Pane number display
set-option -g display-panes-active-colour brightred
set-option -g display-panes-colour white

# Clock
set-window-option -g clock-mode-colour yellow
