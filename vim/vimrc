" ----------------------------------------------------------------------------
"  $Id$
"
"  Vim configuration file
" ----------------------------------------------------------------------------

" ----------------------------------------------------------------------------
" Preliminary settings
" ----------------------------------------------------------------------------

" When started as "evim" (Easy Vim, setup for modeless editing), end here
if v:progname =~? "evim"
        finish
endif

" Use Vim rather than Vi settings (much better!)
" This must be first, because it changes other options as a side effect
if &compatible
        set nocompatible
endif
" When the +eval feature is missing, the set command above will be skipped.
" Use a trick to reset compatible only when the +eval feature is missing.
silent! while 0
        set nocompatible
silent! endwhile


" ----------------------------------------------------------------------------
" General settings
" ----------------------------------------------------------------------------

" Automatically read again a file when changed outside of Vim
set autoread

" Allow backspacing over everything in INSERT mode
set backspace=indent,eol,start

" Number of screen lines to use for the command-line window
set cmdwinheight=5

" Highlight cursor line
set cursorline

" Ignore white spaces in diff mode
set diffopt+=iwhite

" Store swap files in fixed location, not in current directory
set dir=~/.vim/swap//,/var/tmp//,/tmp//,.

" Character encoding
set encoding=utf-8

" Sanely join comment lines
set formatoptions+=j

" Make a buffer hidden when it is |abandon|ed (instead of unloading it)
set hidden

" Keep 200 lines of command line history
set history=200

" Do not redraw the screen while executing commands that have not
" been typed
set lazyredraw

" Enable mouse support
" In many terminal emulators the mouse works just fine. By enabling it
" you can position the cursor, visually select and scroll with the mouse.
" Only xterm can grab the mouse events when using the shift key, for other
" terminals use ":", select text and press Esc.
if has('mouse')
        if &term =~ 'xterm'
                set mouse=a
                set ttymouse=sgr
        else
                set mouse=nvi
        endif
endif

" Disable beeping (aka bell) and window flashing
set noerrorbells visualbell t_vb=

" Switch off automatically setting options by means of modelines (to
" prevent some security exploits)
set nomodeline

" Paste mode
set pastetoggle=<F12>
nmap <silent> <F12> :set paste!<CR>

" Command for starting a shell
set shell=/bin/sh

" The time in milliseconds that is waited for a mapped key
set timeoutlen=500

" Do not set xterm title
"set notitle

" The time in milliseconds that is waited for a key code
set ttimeout
set ttimeoutlen=10

" Improves smoothness of redrawing
set ttyfast

" On pressing 'wildchar' (usually <Tab>) to invoke completion, the
" possible matches are shown
set wildmenu

" When more than one match, complete till longest common string
set wildmode=longest,list


" ----------------------------------------------------------------------------
" Tabs and indentation
" ----------------------------------------------------------------------------

" Copy indent from current line when starting a new line
set autoindent

" Do smart autoindenting when starting a new line
set smartindent

" Use spaces instead of tabs by default
set expandtab

" Number of spaces that a <Tab> in the file counts for
set tabstop=8

" In a TMUX session, set the pane (instead of xterm's) title
if exists("$TMUX")
        set t_ts=]2;
        set t_fs=\\
endif

" Number of spaces to use for each step of (auto)indent
set shiftwidth=8

" Number of spaces that a <Tab> counts for while performing editing operations
set softtabstop=8


" ----------------------------------------------------------------------------
" Search
" ----------------------------------------------------------------------------

" Highlight the last used search pattern
set hlsearch

" Searching is not case sensitive
set ignorecase

" While typing a search command, show where the pattern matches
if has('reltime')
        set incsearch
endif

" If a pattern contains an uppercase letter, it is case sensitive, otherwise, it is not
set smartcase


" ----------------------------------------------------------------------------
" Visibility and context
" ----------------------------------------------------------------------------

" Precede each line with its line number
set number

" Show the line number relative to the line with the cursor
if exists("+relativenumber")
        set norelativenumber
endif

" Do not show the cursor position all the time
set noruler

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=2

" Wrap long lines
set nowrap


" ----------------------------------------------------------------------------
" Windows and tabs
" ----------------------------------------------------------------------------

" Splitting a window will put the new window below/right the current one
set splitbelow
set splitright

" Never show tab page labels
set showtabline=0


" ----------------------------------------------------------------------------
" Undo
" ----------------------------------------------------------------------------
if exists("+undofile")
        " Store undo info so you can undo previous actions even after you close and reopen a file (only in 7.3)
        set undofile
        " Store undo files in a fixed location, not current directory
        set undodir=~/.vim/undo
endif


" ----------------------------------------------------------------------------
" Unprintable chars highlighting
" ----------------------------------------------------------------------------
set list
if (&term != "vt220") && (&term != "wsvt25")
        set listchars=tab:â†’\ ,trail:Â·,extends:Â»,precedes:Â«,nbsp:Â·
else
        set listchars=tab:>\ ,trail:.,extends:>,precedes:<,nbsp:.
endif


" ----------------------------------------------------------------------------
" Status line
" ----------------------------------------------------------------------------

" Display incomplete commands
set showcmd

" If in INSERT, REPLACE or VISUAL mode put a message on the last line
set showmode

" Always show a status line for the last window
set laststatus=2

" Paste status
function! PasteStatus()
        if (&paste)
                return '[paste] '
        else
                return ''
        endif
endfunction

" Flag multiple tabs
function! MultiTabs()
        if (tabpagewinnr(2, '$') > 0)
                return '[tab+] '
        else
                return ''
        endif
endfunction

set statusline=%*                               " Reset statusline format
set statusline+=[%t]\                           " Name (tail) of file in the buffer
set statusline+=[#%n]\                          " Buffer number
set statusline+=[%Y%W%R%M%W]\                   " Filetype
set statusline+=%{'['.&ff.']'}\                 " File format
set statusline+=%{'['.&fenc.']'}\               " File encoding
set statusline+=%{MultiTabs()}                  " Working with multiple tab pages
set statusline+=%{PasteStatus()}                " Paste mode
set statusline+=%=                              " Move to right
set statusline+=[0x%B]\                         " Current char
set statusline+=[%l/%L\ %c]\                    " Cursor line / total lines
set statusline+=%P                              " Percent through file


" ----------------------------------------------------------------------------
"  Plugins config section (using Vundle)
" ----------------------------------------------------------------------------

if isdirectory($HOME . "/.vim/bundles/vundle")

        " Vundle set-up:
        " git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundles/vundle
        "
        filetype off
        set rtp+=~/.vim/bundles/vundle/
        call vundle#rc("~/.vim/bundles")

        call vundle#begin()

        " Required {
                Plugin 'gmarik/vundle'
        " }

        Plugin 'https://github.com/wincent/terminus'

        Plugin 'https://github.com/jpalardy/vim-slime'

        Plugin 'https://github.com/sk1418/QFGrep'

        Plugin 'https://github.com/AndrewRadev/linediff.vim'

        Plugin 'https://github.com/chrisbra/csv.vim'

        " { vimwiki
        Plugin 'https://github.com/mattn/calendar-vim'
        Plugin 'https://github.com/vimwiki/vimwiki'
        " }

        Plugin 'https://github.com/godlygeek/tabular'

        Plugin 'VisIncr'

        Plugin 'https://github.com/ervandew/supertab'

        Plugin 'https://github.com/christoomey/vim-tmux-navigator'

        Plugin 'https://github.com/mbbill/undotree'

        Plugin 'https://github.com/tpope/vim-commentary'

        Plugin 'https://github.com/hrj/vim-drawit'

        Plugin 'https://github.com/lervag/vimtex'

        Plugin 'https://github.com/junegunn/fzf.vim'

        " { vim-snipmate
        Plugin 'https://github.com/tomtom/tlib_vim'
        Plugin 'https://github.com/MarcWeber/vim-addon-mw-utils'
        Plugin 'https://github.com/garbas/vim-snipmate'
        Plugin 'https://github.com/honza/vim-snippets'
        " }

        " { Useful for gvim (and when colman cannot be used)
        Plugin 'https://github.com/chriskempson/base16-vim'
        " }

        call vundle#end()

        " Enable extended % matching
        runtime macros/matchit.vim

        " Enable file type detection and load indent files, to automatically do
        " language-dependent indenting
        "filetype plugin indent on
        filetype plugin on

        " terminus
        let g:TerminusMouse = 0
        let g:TerminusCursorShape=0

        " vim-slime
        if exists("$TMUX")
                let g:slime_target = "tmux"
                let g:slime_paste_file = "/tmp/$USER.vim-slime.paste"
                let g:slime_default_config = {"socket_name": split($TMUX, ",")[0], "target_pane": ":.right"}
                let g:slime_dont_ask_default = 1
                let g:slime_no_mappings = 1
        endif

        " vim-notes
        let g:notes_directories = ['$HOME/notes']
        let g:notes_suffix = ".txt"
        let g:notes_unicode_enabled = 0

        " supertab (+ completion popup menu adjustment)
        let g:SuperTabDefaultCompletionType = "context"
        let g:SuperTabLongestHighlight = 1
        let g:SuperTabMappingForward = "<F1>"
        let g:SuperTabMappingBackward = "<S-F1>"
        set completeopt=longest,menuone
        inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

        " vim-tmux-navigator
        let g:tmux_navigator_no_mappings = 1
        nmap <silent> <Esc>[1;5A :TmuxNavigateUp<CR>
        nmap <silent> <Esc>[1;5B :TmuxNavigateDown<CR>
        nmap <silent> <Esc>[1;5C :TmuxNavigateRight<CR>
        nmap <silent> <Esc>[1;5D :TmuxNavigateLeft<CR>
        nmap <silent> <Esc>[A    :TmuxNavigateUp<CR>
        nmap <silent> <Esc>[B    :TmuxNavigateDown<CR>
        nmap <silent> <Esc>[C    :TmuxNavigateRight<CR>
        nmap <silent> <Esc>[D    :TmuxNavigateLeft<CR>
        nmap <silent> <C-\>      :TmuxNavigatePrevious<CR>

        " netrw (see http://ivanbrennan.nyc/blog/2014/01/16/rigging-vims-netrw)
        let g:netrw_liststyle = 3         " 0: thin view; 3: tree view
        let g:netrw_banner = 0            " No banner

        " vimwiki
        " let g:vimwiki_list = [{'path': '~/notes/',
        "                      \ 'syntax': 'markdown', 'ext': '.md'}]
        " let g:vimwiki_global_ext = 0

        let g:vimwiki_list = [{'path': '~/notes/'}]

        let g:vimwiki_listsyms = ' .X'

        function! VimwikiLinkHandler(link)
                " Use Vim to open external files with the 'file:' scheme.  E.g.:
                let link = a:link
                if link =~# '^file:'
                        let link_infos = vimwiki#base#resolve_link(link)
                        if link_infos.filename == ''
                                echomsg 'Vimwiki Error: Unable to resolve link!'
                                return 0
                        else
                                exe 'edit ' . fnameescape(link_infos.filename)
                                return 1
                        endif
                else
                        return 0
                endif
        endfunction

        let g:tex_flavor = 'latex'
        let g:vimtex_quickfix_ignore_filters = [
            \ 'Overfull',
            \ 'Underfull',
            \ 'setting the option has no effect',
            \ 'functionality may be reduced/unavailable',
            \ 'Token not allowed in a PDF string',
            \ 'references',
            \ 'Empty bibliography',
            \ 'Please (re)run BibTeX on the file(s)',
        \]
        let g:Tex_MultipleCompileFormats = 'pdf,bibtex,pdf'
        let g:vimtex_quickfix_autoclose_after_keystrokes = 1
        let g:vimtex_view_method = 'mupdf'

        " calendar-vim
        let g:calendar_monday = 1
        let g:calendar_weeknm = 1

endif

" vim-snipmate
let g:snipMate = { 'snippet_version' : 1 }


" ----------------------------------------------------------------------------
" Syntax highlighting
" ----------------------------------------------------------------------------

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
        syntax on
endif

function! MinimalSyntaxToggle()
        if ! exists("b:minSyntax") || b:minSyntax == 0
                let b:minSyntax = 1
                hi Boolean term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Character term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Conceal term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Conditional term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Constant term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Debug term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Define term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Delimiter term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Directive term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Exception term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Float term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Format term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Function term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Identifier term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Ignore term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Include term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Keyword term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Label term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Macro term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Number term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Operator term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi PreCondit term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi PreProc term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Repeat term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi SpecialChar term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi SpecialComment term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Special term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Statement term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi StorageClass term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi String term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Structure term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Tag term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Title term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Typedef term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Type term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
                hi Underlined term=NONE cterm=NONE ctermfg=NONE ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
        else
                let b:minSyntax = 0
                if exists("$DISPLAY")
                        set t_Co=256
                        if filereadable(expand("$HOME/.vim/colors/base16.vim")) &&
                         \ filereadable(expand("$HOME/.vim/colors/base16_gui.def"))
                                colorscheme base16
                        else
                                colorscheme default
                        endif
                else
                        colorscheme default
                endif
        endif
endfunction

if exists("$DISPLAY")
        let b:minSyntax = 0
else
        call MinimalSyntaxToggle()
endif

" Add custom equation delimiters to syntax highlighting.
autocmd FileType tex syn region texMathZoneZ matchgroup=texStatement
    \ start="\\eqn{"
    \ start="\\eqn\*{"
    \ start="\\eqnml{"
    \ start="\\eqnml\*{"
    \ start="\\eqna{"
    \ start="\\eqna\*{"
    \ matchgroup=texStatement
    \ end="}"
    \ contains=@texMathZoneGroup


" ----------------------------------------------------------------------------
" Autocommands
" ----------------------------------------------------------------------------

" Put all autocmds in this group, so that they can be deleted easily
augroup vimrcAutoCmd

        autocmd!

        " Highlight cursor line number in INSERT/REPLACE mode
        autocmd InsertEnter *
        \  let b:CursorLineNrBG = synIDattr(synIDtrans(hlID('CursorLineNr')), 'bg')
        \| let b:CursorLineNrFG = synIDattr(synIDtrans(hlID('CursorLineNr')), 'fg')
        \| hi CursorLineNr ctermbg=1
        \| hi CursorLineNr ctermfg=0
        autocmd InsertLeave *
        \  exe 'hi CursorLineNr ctermbg=' . b:CursorLineNrBG . ' ctermfg=' . b:CursorLineNrFG

        " " Change cursor shape in insert/replace/normal mode
        " if &term =~ "^xterm" || &term =~ "^screen"
        "         let &t_SI = "\<Esc>[6 q"
        "         let &t_SR = "\<Esc>[4 q"
        "         let &t_EI = "\<Esc>[2 q"
        " endif

        " For all text files set 'textwidth' to 78 characters
        autocmd FileType text setlocal textwidth=78

        " Remove expandtab for Makefile and Python
        autocmd BufEnter [mM]akefile*,GNUmakefile,*.mk,*.mak,*.py
            \ setlocal noexpandtab nolist

        " Different indentation for tex and wiki files
        autocmd BufEnter *.tex,*.sty,*.wiki
            \ setlocal noexpandtab
            \          nolist
            \          tabstop=2
            \          shiftwidth=2
            \          softtabstop=0

        " Different indentation for XML files
        autocmd FileType xml
            \ setlocal tabstop=4
            \          shiftwidth=4
            \          softtabstop=4

        " Spell check when writing commit logs
        autocmd filetype svn,*commit* setlocal spell spelllang=en

        " Set completion to the current script (only if a specific plugin does
        " not already exist for that filetype)
        if exists("+omnifunc")
                autocmd Filetype *
                        \  if &omnifunc == ""
                        \|       setlocal omnifunc=syntaxcomplete#Complete
                        \| endif
        endif

        " In mutt/claws-mail/thunderbird (external editor):
        " 72-char per line max, set en spell checker
        autocmd BufRead ~/.mutt/tmp/mutt-* :source ~/.vim/mutt.vim
        autocmd BufRead ~/.claws-mail/tmp/tmpmsg.* :source ~/.vim/claws-mail.vimrc
        autocmd BufRead /tmp/*.eml :source ~/.vim/mutt.vim

        " For tmp files, map a killall keybind
        autocmd BufRead /tmp/* nnoremap <silent> <leader>k :1,$d<CR>ZZ

        " Save the contents of the current window
        autocmd BufWinLeave * if expand("%") != "" | mkview | endif

        " VCS helpers
        autocmd BufRead * call VCSmaps()

        " Return to NORMAL mode when leaving a buffer
        autocmd BufLeave,WinLeave * stopinsert

        " Autosave scratchpad buffer
        autocmd BufLeave ${HOME}/.scratchpad write

        " In quickfix window, <CR> will just locate the match, without jumping
        autocmd FileType qf nnoremap <buffer> <CR> <CR><C-W>p

        " If quickfix is the last window, quit
        autocmd BufEnter * call QuitIfOnlyQuickfix()

        " Treat .lib files as text (and not as Cobol libraries)
        autocmd BufNewFile,BufRead *.lib set filetype=txt

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid, when inside an event handler
        " (happens when dropping a file on gvim) and for a commit message (it's
        " likely a different one than last time).
        autocmd BufReadPost *
            \  if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            \|     exe "normal! g`\""
            \| endif

        " Setting appropriate type for files with odd names/extensions
        autocmd BufNewFile,BufRead *.jwmrc set filetype=xml

augroup END

" Remove overheads for large files
" When file's dimension is > 100MB, set the following options:
" eventignore+=FileType (no syntax hilight etc, assumes FileType always on)
" noswapfile (save copy of file)
" bufhidden=unload (save memory when other file is viewed)
" buftype=nowritefile (is read-only)
" undolevels=-1 (no undo possible)
let g:LargeFile = 1024 * 1024 * 100
augroup LargeFile
        autocmd!
        autocmd BufReadPre *  let f = expand("<afile>")
                           \| if getfsize(f) > g:LargeFile
                           \|     set eventignore+=FileType
                           \|     setlocal noswapfile
                           \               bufhidden=unload
                           \               buftype=nowrite
                           \               undolevels=-1
                           \| else
                           \|     set eventignore-=FileType
                           \| endif
augroup END

" Open help in vertical split
augroup VimHelp
        autocmd!
        autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

" Vimwiki specific mappings
augroup Vimwiki
        autocmd!
        autocmd FileType vimwiki
            \  nmap <buffer> <Esc>[1;3C <Plug>VimwikiIncreaseLvlSingleItem
            \| inoremap <buffer> <Esc>[1;3C <C-t>
            \| nmap <buffer> <Esc>[1;3D <Plug>VimwikiDecreaseLvlSingleItem
            \| inoremap <buffer> <Esc>[1;3D <C-d>
        autocmd BufNewFile ~/notes/diary/*
            \  silent execute
            \  "0r !~/bin/vw-diary-tmpl" . " " . expand('%:t:r')
            \| normal G
augroup END

" ----------------------------------------------------------------------------
" Colorscheme
" ----------------------------------------------------------------------------
if exists("$DISPLAY")
        set t_Co=256
        if filereadable(expand("$HOME/.vim/colors/base16.vim")) &&
         \ filereadable(expand("$HOME/.vim/colors/base16_gui.def"))
                colorscheme base16
        else
                colorscheme default
        endif
else
        colorscheme default
endif


" ----------------------------------------------------------------------------
" Custom functions and commands
" ----------------------------------------------------------------------------

" Toggle cursorline/cursorcolumn mode
function! CursorVisibilityToggling()
        if (&cursorcolumn)
                unlet b:cursorvis
                setlocal nocursorcolumn
                setlocal colorcolumn=0
        else
                let b:cursorvis = 1
                setlocal cursorcolumn
                setlocal colorcolumn=78
        endif
endfunction

" Occur: report all lines containing a keyword (or the last search regexp) in
"        quickfix window; note: external grep doesn't work when filenames
"        contain unusual characters (e.g., ":")
command! -nargs=+ Occur
        \ let cpos = getpos(".") |
        \ execute 'silent vimgrep! <args>' |
        \ call setpos(".", cpos) |
        \ unlet cpos |
        \ let currFileDir = expand("%:p:h") |
        \ cd %:p:h |
        \ copen 20 |
        \ cd - |
        \ execute "lcd " . currFileDir |
        \ unlet currFileDir |
        \ redraw!

" Remove trailing spaces
function! RemoveTrailingSpaces()
        let _cpos = getpos(".")
        execute '%s/\s\+$//'
        execute 'nohlsearch'
        call setpos(".", _cpos)
endfunction

" Window zooming
function! ZoomWin()
        if exists('g:zoomOn') && g:zoomOn
                let g:zoomOn = 0
                tabclose
        else
                let g:zoomOn = 1
                tab split
        endif
endfunction

"  Move cursor line to top/middle/bottom, scrolling the edit window when
"  the function is called with an argument (whatever it is), then clear
"  and redraw the screen
function! MoveCursorLine(...)
        let l:top    = line('w0')
        let l:bottom = line('w$')
        let l:center = (l:top + l:bottom) / 2
        if line('.') == l:center
                let l:cmd = a:0 ? "zt" : "H"
        elseif line('.') <= (l:top + &scrolloff)
                let l:cmd = a:0 ? "zb" : "L"
        else
                let l:cmd = a:0 ? "zz" : "M"
        endif
        execute "normal " . l:cmd
endfunction

" VCS helpers
function! VCScmd(...)
        let vcscmd  = a:1
        let vcsfile = a:2
        let dodiff  = (a:0 >= 3) ? a:3 : 0
        tab split
        leftabove vertical new
        setlocal nobuflisted buftype=nofile bufhidden=wipe noswapfile
        execute 'silent r !' . vcscmd . ' ' . vcsfile
        silent 1d
        setlocal nomodifiable
        if (dodiff == 1)
                windo diffthis
        endif
        normal <C-w>w
endfunction

function! VCSmaps()
        if isdirectory(expand('%:.:h') . '/' . 'CVS')
                nmap <buffer> <silent> <leader>vd :call VCScmd('cvs -q update -p', expand('%'), 1)<CR>
                nmap <buffer> <silent> <leader>vD :call VCScmd('cvs diff', expand('%'))<CR>
                nmap <buffer> <silent> <leader>vh :call VCScmd('cvs log', expand('%'))<CR>
        elseif isdirectory(expand('%:.:h') . '/' . '.SYNC')
                nmap <buffer> <silent> <leader>vd :call VCScmd('~/bin/dss-cat', expand('%'), 1)<CR>
                nmap <buffer> <silent> <leader>vD :call VCScmd('dssc diff -kk -unified -version Latest', expand('%'))<CR>
                nmap <buffer> <silent> <leader>vh :call VCScmd('dssc vhist', expand('%'))<CR>
        endif
endfunction

" If quickfix is the last window, quit
function! QuitIfOnlyQuickfix()
        if &buftype=="quickfix"
                if winnr('$') < 2
                        quit
                endif
        endif
endfunction

" Show the changes to the current buffer since the last save
command DiffOrig
    \  leftabove vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \| wincmd p | diffthis

" Read a file and insert its content at cursor position
command! -complete=file -nargs=1 R .-1r <args>

" ----------------------------------------------------------------------------
" Normal mappings
" ----------------------------------------------------------------------------

" Make jumping to a marked line more intuitive
nnoremap ' `

" Search for visual selection
vnoremap * <Esc>/<C-R>*<CR>
vnoremap # <Esc>?<C-R>*<CR>

" Undo tree
nmap <F4> :UndotreeToggle<CR>

" Output the current syntax group
nmap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
           \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
           \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Always go to the beginning of a line before doing a 'gF' operation
nnoremap gF 0gF

" Fix default regex handling
"nnoremap / /\v
"vnoremap / /\v
"nnoremap <leader>/ /\V
"vnoremap <leader>/ /\V
"nnoremap ? ?\v
"vnoremap ? ?\v
"nnoremap <leader>? ?\V
"vnoremap <leader>? ?\V

" Use right movement keys!
nnoremap j  gj
nnoremap k  gk

" Emacs style keybindings in INSERT mode
inoremap <C-a> <C-o>I
inoremap <C-e> <C-o>A
inoremap <C-d> <C-o>D
inoremap <Esc>d <C-o>dw
inoremap <Esc>[1;3C <C-o>w
inoremap <Esc>[1;3D <C-o>b

" Move effectively among tabs
nnoremap <silent> <C-t>l        :tabnext<CR>
nnoremap <silent> <C-t><Right>  :tabnext<CR>
nnoremap <silent> <C-t>h        :tabprevious<CR>
nnoremap <silent> <C-t><Left>   :tabprevious<CR>
nnoremap <silent> <C-t>e        :tabedit %<CR>
nnoremap <silent> <C-t>q        :tabclose<CR>

" Move effectively among windows
nnoremap <C-w>h <C-w><C-h>
nnoremap <C-w>j <C-w><C-j>
nnoremap <C-w>k <C-w><C-k>
nnoremap <C-w>l <C-w><C-l>

" Do not remove indentation for comments when smartindex is set
inoremap # X#

" Common refuses
cnoremap Qa qa
cnoremap QA qa

" Number incr/decr
nnoremap + <C-a>
nnoremap - <C-x>
vnoremap <silent> + :norm <CR>
vnoremap <silent> - :norm <CR>

" Window zooming
nnoremap <C-w><C-u> <C-w>o
nmap <silent> <C-w><C-o> :call ZoomWin()<CR>
nmap <silent> <C-w>o :call ZoomWin()<CR>

" Omni-completion function (when available)
inoremap @@ <C-x><C-o>

" Keep selected text when fixing indentation
vnoremap < <gv
vnoremap > >gv

" Map <C-Tab> to <Tab> to allow inserting a tab character not at the beginning
" of the line (when g:SuperTabMappingForward is set to '<tab>')
inoremap <Esc>[27;5;9~ <Tab>

" Scratchpad
nmap gso :vsplit ${HOME}/.scratchpad<CR>G
nmap gsc :vsplit ${HOME}/.scratchpad<CR>
        \:1,$d<CR>
        \72i-<Esc>
        \o This is the scratchpad buffer!!!<CR><Esc>
        \72i-<Esc>
        \o<Esc>
vmap gsp y
        \:let headLine = "[... From: " . expand("%:p") . " ...]"<CR>
        \:vsplit ${HOME}/.scratchpad<CR>
        \Go<Esc>
        \:put =headLine<CR>
        \p
        \:unlet headLine<CR>

" diff mode
nnoremap <expr> <C-p> &diff ? '[cz.' : '<Nop>'
nnoremap <expr> <C-n> &diff ? ']cz.' : '<Nop>'


" ----------------------------------------------------------------------------
" Mappings using <leader>
" ----------------------------------------------------------------------------

" Some guidelines for chosing the most appropriate <leader> key and relative
" mappings:
" - <leader> positions should be:
"       * independent from keyboard layout;
"       * on the left side;
" - <leader> shouldn't be a key combination (no ModKey, no Shift);
" - always use <leader> with one or two lowercase letters.
let mapleader = "\<Tab>"
let maplocalleader = "\<Tab>"

" ** <leader> ** Temporarely switch off hlsearch
nmap <silent> <leader><leader> :nohlsearch<CR>

" ** <CR> ** vim-slime plugin
nmap <silent> <leader><CR> <Plug>SlimeLineSend
xmap <silent> <leader><CR> <Plug>SlimeRegionSend

" ** * ** Highlight all occurrences of the word under the cursor (without moving)
nnoremap <silent> <leader>* :let @/ = '\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

" ** ** ** Show all occurrences of the word under the cursor
nmap <silent> <leader>** :Occur /<C-r><C-w>/ %<CR>

" ** +- ** VISUAL mode inc/dec
vmap <leader>+ :II 1 ''<CR>
vmap <leader>- :II -1 ''<CR>

" ** - ** Ruler
nmap <leader>- o<Esc>72i-<Esc>gcc73\|D
" ----------------------------------------------------------------------

" ** <Up>/<Down> ** Move current line up/down
nnoremap <leader><Up>   :m -2<CR>
nnoremap <leader><Down> :m +1<CR>

" ** <Space> ** Remove trailing spaces
nmap <silent> <leader><Space> :silent! call RemoveTrailingSpaces()<CR>

" ** <C-l> ** Recenter cursor line and redraw
cmap <silent> <C-l> :redraw!<CR>
nmap <silent> <C-l> :call MoveCursorLine("scroll")<CR>:redraw!<CR>


" ** 1-9 ** Switch to buffer #
nmap <silent> <leader>1  :1b<CR>
nmap <silent> <leader>2  :2b<CR>
nmap <silent> <leader>3  :3b<CR>
nmap <silent> <leader>4  :4b<CR>
nmap <silent> <leader>5  :5b<CR>
nmap <silent> <leader>6  :6b<CR>
nmap <silent> <leader>7  :7b<CR>
nmap <silent> <leader>8  :8b<CR>
nmap <silent> <leader>9  :9b<CR>

" ** A ** Tabular plugin
nmap <silent> <leader>a= :Tabularize /=<CR>
vmap <silent> <leader>a= :Tabularize /=<CR>
nmap <silent> <leader>a: :Tabularize /:\zs<CR>
vmap <silent> <leader>a: :Tabularize /:\zs<CR>
nmap <silent> <leader>a<Bar> :Tabularize /\|/l1<CR>
vmap <silent> <leader>a<Bar> :Tabularize /\|/l1<CR>
nmap <silent> <leader>a<Space> :Tabularize / /l0<CR>
vmap <silent> <leader>a<Space> :Tabularize / /l0<CR>

" ** B ** Switch to previous buffer in list
nmap <leader>b  :bp<CR>

" ** C ** Toggle cursor position high visibility mode
nmap <silent> <leader>c :call CursorVisibilityToggling()<CR>

" ** DD ** Duplicate line, comment original
nmap <silent> <leader>dd Ygccp

" ** DW ** Delete all lines containing the WORD under the cursor
nnoremap <silent> <leader>dw
        \ :let cl = line(".")<CR>:g/<C-R><C-A>/d<CR>:call cursor(cl, 1)<CR>

" ** E ** Edit Vim's config file
nmap <leader>e :e ${HOME}/.vimrc<CR>

" ** F ** Switch to next buffer in list
nmap <leader>f  :bn<CR>

" ** G ** Switch to alternate buffer
nmap <leader>g  :e#<CR>

" ** GF ** Edit a new file, whose name is under the cursor
nmap <leader>gf :e <cfile><CR>

" ** I ** Insert specific elements
"
" Attribution line: author, date [: <note>]
nmap <silent> <leader>ia :set paste<CR>oAdL, <Esc>
                        \:set nopaste<CR>:r !date +\%Y-\%m-\%d:\ <CR>kJgccA
"
" Copyright line
nmap <silent> <leader>ic o(C) <Esc>
    \:r !date +\%Y<CR>kJA Alessandro De Laurenzis <just22@atlantide.mooo.com><Esc>gcc
"
" File header
nmap <silent> <leader>ih 1GO#!/bin/sh<CR><CR>
                           \# <Esc>70a-<Esc>o
                           \#  $$<CR>
                           \#  <CR>
                           \# <Esc>70a-<Esc>kA
"
" 2-clause BSD license
map <silent> <leader>il :set paste<CR>o
                        \(C) <Esc>mw:r !date +\%Y<CR>kJA Alessandro DE LAURENZIS <just22.adl@gmail.com><CR>
                        \All Rights Reserved<CR><CR>
                        \Redistribution and use in source and binary forms, with or without<CR>
                        \modification, are permitted provided that the following conditions<CR>
                        \are met:<CR>
                        \<CR>
                        \1. Redistributions of source code must retain the above copyright<CR>
                        \   notice, this list of conditions and the following disclaimer.<CR><CR>
                        \2. Redistributions in binary form must reproduce the above copyright<CR>
                        \   notice, this list of conditions and the following disclaimer in the<CR>
                        \   documentation and/or other materials provided with the distribution.<CR>
                        \<CR>
                        \THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<CR>
                        \"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<CR>
                        \LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR<CR>
                        \A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT<CR>
                        \HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,<CR>
                        \SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT<CR>
                        \LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<CR>
                        \DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<CR>
                        \THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<CR>
                        \(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<CR>
                        \OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<CR><Esc>
                        \mz:set nopaste<CR>V`wgc`z
"
" Snip lines
nmap <silent> <leader>is o[...]<Esc>j0
nmap <silent> <leader>iS o[................... snip ...................]<Esc>j0

" ** K ** See killall keybind in autocmd section

" ** L ** Buffer list
nmap <leader>l  :ls<CR>:buffer<Space>

" ** M ** Move cursor line
nmap <silent> <leader>m :call MoveCursorLine()<CR>:redraw!<CR>

" ** O ** Insert empty lines
nnoremap <leader>o o<Esc>
nnoremap <leader>O O<Esc>

" ** Q ** Quickly close current buffer
nmap <silent> <leader>q :bdelete<CR>

" ** R ** Reload config file
nmap <leader>r :source $HOME/.vimrc<CR>

" ** S ** Option toggling
nmap <leader>se :setlocal spell spelllang=en<CR>
nmap <leader>si :setlocal spell spelllang=it<CR>
nmap <leader>so :setlocal nospell<CR>
nmap <silent> <leader>sl :set list!<CR>:set list?<CR>
nmap <silent> <leader>sn :set number!<CR>
nmap <silent> <leader>sr :set relativenumber!<CR>
nmap <silent> <leader>st :set expandtab!<CR>:retab!<CR>:set expandtab?<CR>
nmap <silent> <leader>sw :set wrap!<CR>:set wrap?<CR>

" ** T ** Explore directory of current file
nmap <silent> <leader>t :Explore<CR>
nmap <silent> <leader>T :Vexplore!<CR>

" ** U ** Underline
nmap <leader>u yypVr=

" ** V ** Restore the cursor position in the current window
"         (from last edit session); see also VCSmaps
nmap <silent> <leader>v :loadview<CR>

" ** X ** Minimal syntax toggling
nmap <silent> <leader>x :call MinimalSyntaxToggle()<CR>

" ** Y ** Copy the current buffer filename (with full path)
nmap <silent> <leader>yy :let @* = expand("%:p")<CR>

" ** W ** Reserved for VimWiki


" ----------------------------------------------------------------------------
" Abbreviations
" ----------------------------------------------------------------------------

" cabbrev f    find
" cabbrev sf   sfind
" cabbrev vsf  vertical sfind

" " Mail
" iabbrev     _h   Hello
" iabbrev     _br  Best regards
" iabbrev     _all All the best
" iabbrev     _t   Thanks in advance

" Copy/paste between sessions
cabbrev _y w! /tmp/$USER.vi.yank
cabbrev _p r /tmp/$USER.vi.yank


" ----------------------------------------------------------------------
" Source local vimrc file
" ----------------------------------------------------------------------------
try
        source ~/.vim/vimrc.local
catch
        " Do not output any error msg in case no local vimrc exists
endtry
