" ----------------------------------------------------------------------------
"  $Id$
"
"  _    __ _               ______               ____ _           ______ _  __
" | |  / /(_)____ ___     / ____/____   ____   / __/(_)____ _   / ____/(_)/ /___
" | | / // // __ `__ \   / /    / __ \ / __ \ / /_ / // __ `/  / /_   / // // _ \
" | |/ // // / / / / /  / /___ / /_/ // / / // __// // /_/ /  / __/  / // //  __/
" |___//_//_/ /_/ /_/   \____/ \____//_/ /_//_/  /_/ \__, /  /_/    /_//_/ \___/
"                                                   /____/
" ----------------------------------------------------------------------------


" ----------------------------------------------------------------------------
" Preliminary settings
" ----------------------------------------------------------------------------

" When started as "evim" (Easy Vim, setup for modeless editing), end here
if v:progname =~? "evim"
        finish
endif

" Use Vim rather than Vi settings (much better!)
" This must be first, because it changes other options as a side effect
if &compatible
        set nocompatible
endif
" When the +eval feature is missing, the set command above will be skipped,
" so use this trick to reset compatible mode
silent! while 0
        set nocompatible
silent! endwhile


" ----------------------------------------------------------------------------
" General settings
" ----------------------------------------------------------------------------

" Automatically read again a file when changed outside of Vim
set autoread

" Allow backspacing over everything in INSERT mode
set backspace=indent,eol,start

" Insert mode completion: always show a pop-up menu
set completeopt=menuone

" Number of screen lines to use for the command-line window
set cmdwinheight=5

" Highlight cursor line
set cursorline

" Ignore white spaces in diff mode
set diffopt+=iwhite

" Store swap files in fixed location, not in current directory
set dir=~/.vim/swap//,/var/tmp//,/tmp//,.

" Character encoding
set encoding=utf-8

" Sanely join comment lines
set formatoptions+=j

" Make a buffer hidden when it is |abandon|ed (instead of unloading it)
set hidden

" Keep 200 lines of command-line history
set history=200

" Do not redraw the screen while executing commands that have not
" been typed
set lazyredraw

" Disable beeping (aka bell) and window flashing
set noerrorbells visualbell t_vb=

" Switch off automatically setting options by means of modelines (to
" prevent some security exploits)
set nomodeline

" Paste mode
set pastetoggle=<F12>
nmap <silent> <F12> :set paste!<CR>

" Command for starting a shell
set shell=/bin/sh

" Jump to the window containing the specified buffer, if it exists
set switchbuf=useopen

" The time in milliseconds that is waited for a mapped key
set timeoutlen=500

" Set terminal title (and restore the previous one on exit)
set title
set titleold=

" The time in milliseconds that is waited for a key code
set ttimeout
set ttimeoutlen=10

" Improves smoothness of redrawing
set ttyfast

" On pressing 'wildchar' (usually <Tab>) to invoke completion, the
" possible matches are shown
set wildmenu

" When more than one match, complete till longest common string
set wildmode=longest,list


" ----------------------------------------------------------------------------
" Tabs and indentation
" ----------------------------------------------------------------------------

" Copy indent from current line when starting a new line
set autoindent

" Do smart autoindenting when starting a new line
set smartindent

" Use spaces instead of tabs by default
set expandtab

" Number of spaces that a <Tab> in the file counts for
set tabstop=8

" Number of spaces to use for each step of (auto)indent
set shiftwidth=8

" Number of spaces that a <Tab> counts for while performing editing operations
set softtabstop=8


" ----------------------------------------------------------------------------
" Search
" ----------------------------------------------------------------------------

" Highlight the last used search pattern
set hlsearch

" Searching is not case sensitive
set ignorecase

" While typing a search command, show where the pattern matches
set incsearch

" If a pattern contains an uppercase letter, it is case sensitive,
" otherwise, it is not
set smartcase


" ----------------------------------------------------------------------------
" Visibility and context
" ----------------------------------------------------------------------------

" Precede each line with its line number
set number

" Show the line number relative to the line with the cursor
set norelativenumber

" Do not show the cursor position all the time
set noruler

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=2

" Wrap long lines
set nowrap


" ----------------------------------------------------------------------------
" Windows and tabs
" ----------------------------------------------------------------------------

" Splitting a window will put the new window below/right the current one
set splitbelow
set splitright

" Never show tab page labels
set showtabline=0


" ----------------------------------------------------------------------------
" The following settings are from vim-sensible
" ----------------------------------------------------------------------------

" Disable completing keywords in included files (e.g., #include in C), that
" can result in the slow, recursive scanning of hundreds of files of dubious
" relevance
set complete-=i

" Bases Vim will consider for numbers when using CTRL-A and CTRL-X
set nrformats=alpha,bin,hex

" Horizontal scrolling
set sidescroll=1
set sidescrolloff=5

" Display as much as possible of the last line in a window,"@@@" at the
" beginning
set display=truncate

" Replace the check for a tags file in the parent directory of the current
" file with a check in every ancestor directory
if has('path_extra') && (',' . &g:tags . ',') =~# ',\./tags,'
        setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" Persist g:UPPERCASE variables, used by some plugins, in .viminfo
if !empty(&viminfo)
        set viminfo^=!
endif

" Saving options in session and view files causes more problems than it
" solves, so disable it
set sessionoptions-=options
set viewoptions-=options

" Disable a legacy behavior that can break plugin maps
if has('langmap') && exists('+langremap') && &langremap
        set nolangremap
endif

" Correctly highlight $() and other modern affordances in filetype=sh
if !exists('g:is_posix') &&
\  !exists('g:is_bash') && !exists('g:is_kornshell') && !exists('g:is_dash')
        let g:is_posix = 1
endif


" ----------------------------------------------------------------------------
" Undo
" ----------------------------------------------------------------------------
" Store undo info so you can undo previous actions even after you close and
" reopen a file (starting from 7.3)
set undofile

" Store undo files in a fixed location, not current directory
set undodir=~/.vim/undo


" ----------------------------------------------------------------------------
" Unprintable chars highlighting
" ----------------------------------------------------------------------------
set list
if (&term != "vt220") && (&term != "wsvt25")
        set listchars=tab:→\ ,trail:·,extends:»,precedes:«,nbsp:·
else
        set listchars=tab:>\ ,trail:.,extends:>,precedes:<,nbsp:.
endif


" ----------------------------------------------------------------------------
" Status line
" ----------------------------------------------------------------------------

" Display incomplete commands
set showcmd

" If in INSERT, REPLACE or VISUAL mode put a message on the last line
set showmode

" Always show a status line for the last window
set laststatus=2

" Paste status
function! PasteStatus()
        if (&paste)
                return '[paste] '
        else
                return ''
        endif
endfunction

" Flag multiple tabs
function! MultiTabs()
        if (tabpagewinnr(2, '$') > 0)
                return '[tab+] '
        else
                return ''
        endif
endfunction

set statusline=%*                               " Reset statusline format
set statusline+=[%t]\                           " Name (tail) of file in the buffer
set statusline+=[#%n]\                          " Buffer number
set statusline+=[%Y%W%R%M%W]\                   " Filetype
set statusline+=%{'['.&ff.']'}\                 " File format
set statusline+=%{'['.&fenc.']'}\               " File encoding
set statusline+=%{MultiTabs()}                  " Working with multiple tab pages
set statusline+=%{PasteStatus()}                " Paste mode
set statusline+=%=                              " Move to right
set statusline+=[0x%B]\                         " Current char
set statusline+=[%l/%L\ %c]\                    " Cursor line / total lines
set statusline+=%P                              " Percent through file


" Add custom equation delimiters to syntax highlighting
autocmd FileType tex syn region texMathZoneZ matchgroup=texStatement
    \ start="\\eqn{"
    \ start="\\eqn\*{"
    \ start="\\eqnml{"
    \ start="\\eqnml\*{"
    \ start="\\eqna{"
    \ start="\\eqna\*{"
    \ matchgroup=texStatement
    \ end="}"
    \ contains=@texMathZoneGroup


" ----------------------------------------------------------------------------
" Autocommands
" ----------------------------------------------------------------------------

augroup vimAutoCmd
        autocmd!

        " For all text files set 'textwidth' to 78 characters
        autocmd FileType markdown,text,tex setlocal textwidth=78

        " Remove expandtab for Makefile and Python files
        autocmd BufEnter [mM]akefile*,GNUmakefile,*.mk,*.mak,*.py
            \ setlocal noexpandtab nolist

        " Different indentation for tex and wiki files
        autocmd BufEnter *.tex,*.sty,*.wiki
            \ setlocal noexpandtab
            \          nolist
            \          tabstop=2
            \          shiftwidth=2
            \          softtabstop=0

        " Different indentation for XML files
        autocmd FileType xml
            \ setlocal tabstop=4
            \          shiftwidth=4
            \          softtabstop=4

        " Spell check when writing commit logs
        autocmd filetype svn,*commit* setlocal spell spelllang=en

        " Set completion to the current script (only if a specific plugin does
        " not already exist for that filetype)
        if exists("+omnifunc")
                autocmd Filetype *
                        \  if &omnifunc == ""
                        \|       setlocal omnifunc=syntaxcomplete#Complete
                        \| endif
        endif

        " In mutt/claws-mail/thunderbird (external editor):
        " 78-char per line max, set en spell checker
        autocmd BufRead ~/.mutt/tmp/mutt-* :source ~/.vim/mutt.vim
        autocmd BufRead ~/.claws-mail/tmp/tmpmsg.* :source ~/.vim/claws-mail.vimrc
        autocmd BufRead /tmp/*.eml :source ~/.vim/mutt.vim

        " For tmp files, map a killall keybind
        autocmd BufRead /tmp/* nnoremap <silent> <leader>k :1,$d<CR>ZZ

        " Save the contents of the current window
        autocmd BufWinLeave * if expand("%") != "" | mkview | endif

        " Return to NORMAL mode when leaving a buffer
        autocmd BufLeave,WinLeave,FocusLost * stopinsert

        " Autosave scratchpad buffer
        autocmd BufLeave $HOME/.scratchpad write

        " Autosave journal files
        autocmd BufLeave $HOME/.journal/*.md write
        autocmd BufLeave $G_WORKSPACE/journal.md write

        " In quickfix window, <CR> will just locate the match, without jumping
        autocmd FileType qf nnoremap <buffer> <CR> <CR><C-W>p

        " If quickfix is the last window, quit
        autocmd BufEnter * call QuitIfOnlyQuickfix()

        " Treat .lib files as text (and not as Cobol libraries)
        autocmd BufNewFile,BufRead *.lib set filetype=txt

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid, when inside an event handler
        " (happens when dropping a file on gvim) and for a commit message (it's
        " likely a different one than last time).
        autocmd BufReadPost *
            \  if line("'\"") >= 1 && line("'\"") <= line("$")
            \|     execute "normal! g`\""
            \| endif
        autocmd BufReadPost *COMMIT*,*commit*
            \  execute "normal gg"

        " Setting appropriate type for files with odd names/extensions
        autocmd BufNewFile,BufRead *.jwmrc set filetype=xml

augroup END

" Remove overheads for large files
" When file's dimension is > 100MB, set the following options:
" eventignore+=FileType (no syntax hilight etc, assumes FileType always on)
" noswapfile (save copy of file)
" bufhidden=unload (save memory when other file is viewed)
" buftype=nowritefile (is read-only)
" undolevels=-1 (no undo possible)
let g:LargeFile = 1024 * 1024 * 100
augroup LargeFile
        autocmd!
        autocmd BufReadPre *
        \       let f = expand("<afile>")
        \|      if getfsize(f) > g:LargeFile
        \|          set eventignore+=FileType
        \|          setlocal noswapfile
        \                    bufhidden=unload
        \                    buftype=nowrite
        \                    undolevels=-1
        \|      else
        \|          set eventignore-=FileType
        \|      endif
augroup END

" Open help in vertical split
augroup VimHelp
        autocmd!
        autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

augroup AfterPluginsLoading
        autocmd!
        autocmd VimEnter *
            \  if match(&runtimepath, 'fzf.vim') != -1
            \|      nmap <silent> <leader>l  :Buffers<CR>
            \| else
            \|      nmap <leader>l  :ls<CR>:buffer<Space>
            \| endif
augroup END

" Automatically copy all yanks to system clipboard
augroup clipboard
        autocmd!
        autocmd TextYankPost *
            \  if v:event.regname==''&&v:event.operator=='y'
            \|   let @+=join(v:event.regcontents, "\n")
            \| endif
augroup END


" ----------------------------------------------------------------------------
" Custom functions and commands
" ----------------------------------------------------------------------------

" Toggle cursorline/cursorcolumn mode
function! CursorVisibilityToggling()
        if (&cursorcolumn)
                unlet b:cursorvis
                setlocal nocursorcolumn
                setlocal colorcolumn=0
        else
                let b:cursorvis = 1
                setlocal cursorcolumn
                setlocal colorcolumn=78
        endif
endfunction

" Occur: report all lines containing a keyword (or the last search regexp) in
"        quickfix window; note: external grep doesn't work when filenames
"        contain unusual characters (e.g., ":")
command! -nargs=+ Occur
        \ let cpos = getpos(".") |
        \ execute 'silent vimgrep! <args>' |
        \ call setpos(".", cpos) |
        \ unlet cpos |
        \ let currFileDir = expand("%:p:h") |
        \ cd %:p:h |
        \ copen 20 |
        \ cd - |
        \ execute "lcd " . currFileDir |
        \ unlet currFileDir |
        \ redraw!

" Remove trailing spaces
function! RemoveTrailingSpaces()
        let _cpos = getpos(".")
        execute '%s/\s\+$//'
        execute 'nohlsearch'
        call setpos(".", _cpos)
endfunction

" Window zooming
function! ZoomWin()
        if exists('g:zoomOn') && g:zoomOn
                let g:zoomOn = 0
                tabclose
        else
                let g:zoomOn = 1
                tab split
        endif
endfunction

"  Move cursor line to top/middle/bottom, scrolling the edit window when
"  the function is called with an argument (whatever it is), then clear
"  and redraw the screen
function! MoveCursorLine(...)
        let l:top    = line('w0')
        let l:bottom = line('w$')
        let l:center = (l:top + l:bottom) / 2
        if line('.') == l:center
                let l:cmd = a:0 ? "zt" : "H"
        elseif line('.') <= (l:top + &scrolloff)
                let l:cmd = a:0 ? "zb" : "L"
        else
                let l:cmd = a:0 ? "zz" : "M"
        endif
        execute "normal " . l:cmd
endfunction

" If quickfix is the last window, quit
function! QuitIfOnlyQuickfix()
        if (&buftype=="quickfix") && (winnr('$') < 2)
                quit
        endif
endfunction

" Show the changes to the current buffer since the last save
command! DiffOrig
    \  leftabove vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \| wincmd p | diffthis

" Read a file and insert its content at cursor position
command! -complete=file -nargs=1 R .-1r <args>

" A very basic calculator using perl
function! PerlCalc()
        let line=getline(".")
        execute 'silent r !perl -e "print ' . line . '"'
endfunction

" Return selected text
function! s:GetSelectedText()
        let l:origUnnamedReg = getreg('"')
        let l:origUnnamedRegtype = getregtype('"')
        normal gvy
        let l:ret = getreg('"')
        call setreg('"', l:origUnnamedReg, l:origUnnamedRegtype)
        execute "normal \<Esc>"
        return l:ret
endfunction


" ----------------------------------------------------------------------------
" Normal/insert/visual mode mappings (without <leader> key)
" ----------------------------------------------------------------------------

" Use <Esc> to clear hlsearch, too
nnoremap <silent> <Esc> :noh<CR><Esc>

" Make jumping to a marked line more intuitive
nnoremap ' `

" Undo tree
nmap <F4> :UndotreeToggle<CR>

" Output the current syntax group
nmap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Always go to the beginning of a line before doing a 'gF' operation
nnoremap gF 0gF

" Use right movement keys!
nnoremap j  gj
nnoremap k  gk

" Emacs style keybindings in INSERT mode
inoremap <C-a> <C-o>I
inoremap <C-e> <C-o>A
inoremap <C-d> <C-o>D
inoremap <Esc>d <C-o>dw
inoremap <Esc>[1;3C <C-o>w
inoremap <Esc>[1;3D <C-o>b

" Move effectively among tabs
nnoremap <silent> <C-t>l        :tabnext<CR>
nnoremap <silent> <C-t><Right>  :tabnext<CR>
nnoremap <silent> <C-t>h        :tabprevious<CR>
nnoremap <silent> <C-t><Left>   :tabprevious<CR>
nnoremap <silent> <C-t>e        :tabedit %<CR>
nnoremap <silent> <C-t>q        :tabclose<CR>

" Move effectively among windows
nnoremap <C-w>h <C-w><C-h>
nnoremap <C-w>j <C-w><C-j>
nnoremap <C-w>k <C-w><C-k>
nnoremap <C-w>l <C-w><C-l>

" Do not remove indentation for comments when smartindex is set
inoremap # X#

" Common refuses
cnoremap Qa qa
cnoremap QA qa

" Number incr/decr
nnoremap + <C-a>
nnoremap - <C-x>
vnoremap <silent> + :normal <CR>
vnoremap <silent> - :normal <CR>

" Window zooming
nnoremap <C-w><C-u> <C-w>o
nmap <silent> <C-w><C-o> :call ZoomWin()<CR>
nmap <silent> <C-w>o :call ZoomWin()<CR>

" Omni-completion function (when available)
inoremap @@ <C-x><C-o>

" Keep selected text when fixing indentation
vnoremap < <gv
vnoremap > >gv

" Map <C-Tab> to <Tab> to allow inserting a tab character not at the beginning
" of the line (when g:SuperTabMappingForward is set to '<tab>')
inoremap <Esc>[27;5;9~ <Tab>

" diff mode / Current directory exploring/searching
nnoremap <silent> <expr> <C-p> &diff ? '[cz.' : ':Files<CR>'
nnoremap <silent> <expr> <C-n> &diff ? ']cz.' : ':silent Lexplore!<CR>'


" ----------------------------------------------------------------------------
" Mappings using <leader>
" ----------------------------------------------------------------------------

" Some guidelines for chosing the most appropriate <leader> key and relative
" mappings:
" - <leader> positions should be:
"       * independent from keyboard layout;
"       * on the left side;
" - <leader> shouldn't be a key combination (no ModKey, no Shift);
" - always use <leader> with one or two lowercase letters.
let mapleader = "\<Tab>"
let maplocalleader = "\<Tab>"

" ** <leader> ** Temporarely switch off hlsearch
nmap <silent> <leader><leader> :nohlsearch<CR>

" ** <CR> ** vim-slime plugin
nmap <silent> <leader><CR> <Plug>SlimeLineSend
xmap <silent> <leader><CR> <Plug>SlimeRegionSend

" ** */# **
" Normal mode: Highlight all occurrences of the word under the cursor (without moving)
" Visual mode: Search for selected text
nnoremap <silent> <leader>* :let @/ = '\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

xnoremap <silent> <leader>* :call setreg("/",
    \ substitute(<SID>GetSelectedText(), '\_s\+', '\\_s\\+', 'g'))<CR>n

xnoremap <silent> <leader># :call setreg("?",
    \ substitute(<SID>GetSelectedText(), '\_s\+', '\\_s\\+', 'g'))<CR>n

" ** ** ** Show all occurrences of the word under the cursor
nnoremap <silent> <leader>** :Occur /<C-r><C-w>/ %<CR>

" ** +- ** VISUAL mode inc/dec
vmap <leader>+ :II 1 ''<CR>
vmap <leader>- :II -1 ''<CR>

" ** - ** Ruler
nmap <leader>- o<Esc>78i-<Esc>gcc2\|r 79\|D

" ** ., ** fzf
nnoremap <silent> <leader>. :Files .<CR>
nnoremap <silent> <leader>, :Files <C-r>=expand("%:h")<CR>/<CR>

" ----------------------------------------------------------------------

" ** <Up>/<Down> ** Move current line up/down
nnoremap <leader><Up>   :m -2<CR>
nnoremap <leader><Down> :m +1<CR>

" ** <Space> ** Remove trailing spaces
nmap <silent> <leader><Space> :silent! call RemoveTrailingSpaces()<CR>

" ** <C-l> ** Recenter cursor line and redraw
cmap <silent> <C-l> :redraw!<CR>
nmap <silent> <C-l> :call MoveCursorLine("scroll")<CR>:redraw!<CR>


" ** 1-9 ** Switch to buffer #
nmap <silent> <leader>1  :1b<CR>
nmap <silent> <leader>2  :2b<CR>
nmap <silent> <leader>3  :3b<CR>
nmap <silent> <leader>4  :4b<CR>
nmap <silent> <leader>5  :5b<CR>
nmap <silent> <leader>6  :6b<CR>
nmap <silent> <leader>7  :7b<CR>
nmap <silent> <leader>8  :8b<CR>
nmap <silent> <leader>9  :9b<CR>

" ** = ** Perl Calculator
nmap <silent> <leader>= :call PerlCalc()<CR>

" ** A ** Tabular plugin
nmap <silent> <leader>a= :Tabularize /=<CR>
vmap <silent> <leader>a= :Tabularize /=<CR>
nmap <silent> <leader>a: :Tabularize /:\zs<CR>
vmap <silent> <leader>a: :Tabularize /:\zs<CR>
nmap <silent> <leader>a<Bar> :Tabularize /\|/l1<CR>
vmap <silent> <leader>a<Bar> :Tabularize /\|/l1<CR>
nmap <silent> <leader>a<Space> :Tabularize / /l0<CR>
vmap <silent> <leader>a<Space> :Tabularize / /l0<CR>

" ** B ** Switch to previous buffer in list
nmap <leader>b  :bp<CR>

" ** C ** Toggle cursor position high visibility mode
nmap <silent> <leader>c :call CursorVisibilityToggling()<CR>

" ** DD ** Duplicate line, comment original
nmap <silent> <leader>dd Ygccp

" ** DW ** Delete all lines containing the WORD under the cursor
nnoremap <silent> <leader>dw
        \ :let cl = line(".")<CR>:g/<C-R><C-A>/d<CR>:call cursor(cl, 1)<CR>

" ** E ** Edit Vim's config file
nmap <leader>e :e ${HOME}/.vimrc<CR>

" ** F ** Switch to next buffer in list
nmap <leader>f  :bn<CR>

" ** G ** Switch to alternate buffer
nmap <leader>g  :e#<CR>

" ** GF ** Edit a new file, whose name is under the cursor
nmap <leader>gf :e <cfile><CR>

" ** I ** Insert specific elements
"
" Attribution line: author, date [: <note>]
nmap <silent> <leader>ia :set paste<CR>oAdL, <Esc>
                        \:set nopaste<CR>:r !date +\%Y-\%m-\%d:\ <CR>kJgccA
"
" Copyright line
nmap <silent> <leader>ic o(C) <Esc>
    \:r !date +\%Y<CR>kJA Alessandro De Laurenzis <just22@atlantide.mooo.com><Esc>gcc
"
" File header
nmap <silent> <leader>ih 1GO#!/bin/sh<CR><CR>
                           \# <Esc>70a-<Esc>o
                           \#  $$<CR>
                           \#  <CR>
                           \# <Esc>70a-<Esc>kA
"
" 2-clause BSD license
map <silent> <leader>il :set paste<CR>o
                        \(C) <Esc>mw:r !date +\%Y<CR>kJA Alessandro DE LAURENZIS <just22.adl@gmail.com><CR>
                        \All Rights Reserved<CR><CR>
                        \Redistribution and use in source and binary forms, with or without<CR>
                        \modification, are permitted provided that the following conditions<CR>
                        \are met:<CR>
                        \<CR>
                        \1. Redistributions of source code must retain the above copyright<CR>
                        \   notice, this list of conditions and the following disclaimer.<CR><CR>
                        \2. Redistributions in binary form must reproduce the above copyright<CR>
                        \   notice, this list of conditions and the following disclaimer in the<CR>
                        \   documentation and/or other materials provided with the distribution.<CR>
                        \<CR>
                        \THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS<CR>
                        \"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT<CR>
                        \LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR<CR>
                        \A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT<CR>
                        \HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,<CR>
                        \SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT<CR>
                        \LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,<CR>
                        \DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY<CR>
                        \THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT<CR>
                        \(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE<CR>
                        \OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<CR><Esc>
                        \mz:set nopaste<CR>V`wgc`z
"
" Snip lines
nmap <silent> <leader>is o[...]<Esc>j0
nmap <silent> <leader>iS o[................... snip ...................]<Esc>j0

" ** K ** See killall keybind in autocmd section

" ** L ** See buffer list in autocmd section

" ** M ** Move cursor line
nmap <silent> <leader>m :call MoveCursorLine()<CR>:redraw!<CR>

" ** N ** Current file's directory exploring
nmap <silent> <leader>n :silent Lexplore! %:h<CR>

" ** O ** Insert empty lines
nnoremap <leader>o o<Esc>
nnoremap <leader>O O<Esc>

" ** P ** Current file's directory searching
nmap <silent> <leader>p :Files %:h<CR>

" ** Q ** Quickly close current buffer
nmap <silent> <leader>q :bdelete<CR>

" ** R ** Reload config file
nmap <leader>r :source $HOME/.vimrc<CR>

" ** S ** Option toggling
nmap <leader>se :setlocal spell spelllang=en<CR>
nmap <leader>si :setlocal spell spelllang=it<CR>
nmap <leader>so :setlocal nospell<CR>
nmap <silent> <leader>sl :set list!<CR>:set list?<CR>
nmap <silent> <leader>sn :set number!<CR>
nmap <silent> <leader>sr :set relativenumber!<CR>
nmap <silent> <leader>st :set expandtab!<CR>:retab!<CR>:set expandtab?<CR>
nmap <silent> <leader>sw :set wrap!<CR>:set wrap?<CR>

" ** U ** Underline
nmap <leader>u yypVr=

" ** V ** Restore the cursor position in the current window (from last edit session)
nmap <silent> <leader>v :loadview<CR>

" ** Y ** Copy the current buffer filename (with full path)
nmap <silent> <leader>yy :let @* = expand("%:p")<CR>

" ** W ** Reserved for VimWiki


" ----------------------------------------------------------------------------
" Scratchpad
" ----------------------------------------------------------------------------
command! ScratchpadOpen
    \  execute "vert sbuffer" . $HOME . "/.scratchpad"
    \| normal G
nnoremap <silent> gso :ScratchpadOpen<CR>

command! ScratchpadClear
    \  execute "vert sbuffer " . $HOME . "/.scratchpad"
    \| 1,$d
    \| normal 78i-<Esc>o This is the scratchpad buffer<CR><Esc>78i-<Esc>o
noremap <silent> gsc :ScratchpadClear<CR>

command! -range ScratchpadPaste
    \  execute <line1> . "," . <line2> . "y"
    \| execute "vert sbuffer" $HOME . "/.scratchpad"
    \| execute "normal o<Esc>o[... from file: " . expand("%:p") . " ...]"
    \| normal pG
noremap <silent> gsp :ScratchpadPaste<CR>


" ----------------------------------------------------------------------------
" Journals
" ----------------------------------------------------------------------------
function! DailyJournal()
        let l:jrnl_dir = $HOME . "/.journal"
        if !isdirectory(l:jrnl_dir)
                call mkdir(l:jrnl_dir)
        endif

        let l:jrnl_file = l:jrnl_dir . "/" . strftime('%Y-%m-%d') . ".md"
        execute "vert sbuffer " . l:jrnl_file
        if !filereadable(l:jrnl_file)
                let l:date = "# " . strftime('%a, %d %b %Y')
                call writefile([l:date], l:jrnl_file)
        endif
        call writefile([""], l:jrnl_file, "a")
        call writefile(["## " . strftime('%H:%M')], l:jrnl_file, "a")
        execute "e!"
        normal Go
endfunction
command! Journal :call DailyJournal()
nmap <silent> gjd :Journal<CR>

function! ProjectJournal()
        if !exists("$G_WORKSPACE")
                echo "No project configured"
                return
        endif

        let l:jnrl_file = $G_WORKSPACE . "/journal.md"
        execute "vert sbuffer " . l:jnrl_file
        if !filereadable(l:jnrl_file)
                call writefile(["# Journal file for:"], l:jnrl_file)
                call writefile(["# Project: " . $PROJECT], l:jnrl_file, "a")
                call writefile(["# Config:  " . $CONFIG],  l:jnrl_file, "a")
                call writefile(["# Design:  " . $DESIGN_NAME], l:jnrl_file, "a")
        endif
        call writefile([""], l:jnrl_file, "a")
        call writefile(["## " . strftime('%a, %d %b %Y - %H:%M')], l:jnrl_file, "a")
        execute "e!"
        normal Go
endfunction
command! JournalPrj :call ProjectJournal()
nmap <silent> gjp :JournalPrj<CR>


" ----------------------------------------------------------------------------
" Yank/paste to/from external file
" ----------------------------------------------------------------------------
command! -range YankExt
    \ execute <line1> . "," . <line2> . "w! /tmp/" . $USER . ".vi.yank"
noremap <silent> _y :YankExt<CR>

command! PasteExt execute "r /tmp/" . $USER . ".vi.yank"
noremap <silent> _p :PasteExt<CR>


" ----------------------------------------------------------------------------
" Source local vimrc file
" ----------------------------------------------------------------------------
try
        source ~/.vim/vimrc.local
catch
        " Do not output any error msg in case no local vimrc exists
endtry


" ----------------------------------------------------------------------------
" Plugins
" ----------------------------------------------------------------------------
try
        source ~/.vim/plugins.vim
catch
        " Do not output an error msg in case no plugins' config file exists
endtry


" ----------------------------------------------------------------------------
" Syntax highlighting & colorscheme
" ----------------------------------------------------------------------------
if &t_Co > 2 || has("gui_running")
        syntax on
        if filereadable(expand("$HOME/.config/tinted-theming/set_theme.vim"))

                function! s:base16_customize() abort
                        " Disable italic (on demand)
                        if exists("g:base16_disable_italic")
                                let l:colorscheme = getcompletion('', 'highlight')
                                for hi in l:colorscheme
                                        if synIDattr(synIDtrans(hlID(hi)), 'italic')
                                                exec 'highlight ' . hi . ' cterm=none gui=none'
                                        endif
                                endfor
                        endif

                        call Base16hi("Visual",     g:base16_gui06, g:base16_gui02, g:base16_cterm06, g:base16_cterm02, "", "")
                        call Base16hi("Character",  g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
                        call Base16hi("Statement",  g:base16_gui0D, "", g:base16_cterm0D, "", "", "")
                        call Base16hi("MatchParen", g:base16_gui06, g:base16_gui02, g:base16_cterm06, g:base16_cterm02,  "", "")
                        call Base16hi("DiffText",   g:base16_gui0D, "", g:base16_cterm0D, "", "inverse", "")
                endfunction

                augroup colorscheme_change
                        autocmd!
                        autocmd ColorScheme * call s:base16_customize()
                augroup END

                set background&         " Just a hack to force reloading the
                                        " default colors; this way, light
                                        " themes work, too (not clear why...)
                let base16colorspace=256
                source $HOME/.config/tinted-theming/set_theme.vim
        else
                let g:accent_colour = 'cyan'
                let g:accent_darken = 0
                let g:accent_invert_status = 0
                let g:accent_auto_cwd_colour = 0
                let g:accent_no_bg = 1
                try
                        colorscheme accent
                catch
                        " Do not output an error msg in case no colorscheme exists
                endtry
        endif
endif


